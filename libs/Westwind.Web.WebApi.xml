<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Web.WebApi</name>
    </assembly>
    <members>
        <member name="T:Westwind.Web.WebApi.SimplePostVariableParameterBinding">
            <summary>
            A Custom HttpParameterBinding to bind multiple parameters from request body
            </summary>
        </member>
        <member name="M:Westwind.Web.WebApi.SimplePostVariableParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
            <summary>
            Check for simple binding parameters in POST data. Bind POST
            data as well as query string data
            </summary>
            <param name="metadataProvider"></param>
            <param name="actionContext"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebApi.SimplePostVariableParameterBinding.HookupParameterBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
            <summary>
            Method that implements parameter binding hookup to the global configuration object's
            ParameterBindingRules collection delegate.
            
            This routine filters based on POST/PUT method status and simple parameter
            types.
            </summary>
            <example>
            GlobalConfiguration.Configuration.
                  .ParameterBindingRules
                  .Insert(0,SimplePostVariableParameterBinding.HookupParameterBinding);
            </example>    
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebApi.SimplePostVariableParameterBinding.TryReadBody(System.Net.Http.HttpRequestMessage)">
            <summary>
            Read and cache the request body
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.WebApi.ApiMessageError">
            <summary>
            Class that represents an error returned to
            the client caller. Can be explicitly returned or
            as part of the UnhandledExceptionFilter.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebApi.ApiMessageError.message">
            <summary>
            The text message for the errors
            </summary>
        </member>
        <member name="P:Westwind.Web.WebApi.ApiMessageError.isCallbackError">
            <summary>
            Flag value that indicates to the client that this
            is an error response
            </summary>
        </member>
        <member name="P:Westwind.Web.WebApi.ApiMessageError.errors">
            <summary>
            An optional list of errors that can be set on the
            error object. Automatically set when passing in 
            a model dictionary with errors.
            </summary>
        </member>
        <member name="M:Westwind.Web.WebApi.ApiMessageError.#ctor">
            <summary>
            Default constructor creates empty error object
            </summary>
        </member>
        <member name="M:Westwind.Web.WebApi.ApiMessageError.#ctor(System.String)">
            <summary>
            Pass in a message string for the exception.
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Westwind.Web.WebApi.ApiMessageError.#ctor(System.Exception)">
            <summary>
            Pass in an exception and pick up the message.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Westwind.Web.WebApi.ApiMessageError.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Pass in a modelState dictionary to create a list of
            binding errors from the API error message
            </summary>
            <param name="modelState"></param>
        </member>
        <member name="M:Westwind.Web.WebApi.ApiMessageError.ParseModelStateErrorMessage(System.String)">
            <summary>
            Strips off anything after period - line number etc. info
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.WebApi.BasicAuthenticationFilter">
            <summary>
            Generic Basic Authentication filter that checks for basic authentication
            headers and challenges for authentication if no authentication is provided
            Sets the Thread Principle with a GenericAuthenticationPrincipal.
            
            You can override the OnAuthorize method for custom auth logic that
            might be application specific.    
            </summary>
            <remarks>Always remember that Basic Authentication passes username and passwords
            from client to server in plain text, so make sure SSL is used with basic auth
            to encode the Authorization header on all requests (not just the login).
            </remarks>
        </member>
        <member name="M:Westwind.Web.WebApi.BasicAuthenticationFilter.#ctor(System.Boolean)">
            <summary>
            Overriden constructor to allow explicit disabling of this
            filter's behavior. Pass false to disable (same as no filter
            but declarative)
            </summary>
            <param name="active"></param>
        </member>
        <member name="M:Westwind.Web.WebApi.BasicAuthenticationFilter.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Override to Web API filter method to handle Basic Auth check
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="M:Westwind.Web.WebApi.BasicAuthenticationFilter.OnAuthorizeUser(System.String,System.String,System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Base implementation for user authentication - you probably will
            want to override this method for application specific logic.
            
            The base implementation merely checks for username and password
            present and set the Thread principal.
            
            Override this method if you want to customize Authentication
            and store user data as needed in a Thread Principle or other
            Request specific storage.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebApi.BasicAuthenticationFilter.ParseAuthorizationHeader(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Parses the Authorization header and creates user credentials
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="M:Westwind.Web.WebApi.BasicAuthenticationFilter.Challenge(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Send the Authentication Challenge request
            </summary>
            <param name="message"></param>
            <param name="actionContext"></param>
        </member>
        <member name="T:Westwind.Web.WebApi.JsonpFormatter">
            <summary>
            Handles JsonP requests when requests are fired with text/javascript
            </summary>
        </member>
        <member name="P:Westwind.Web.WebApi.JsonpFormatter.JsonpParameterName">
            <summary>
             Name of the query string parameter to look for
             the jsonp function name
            </summary>
        </member>
        <member name="F:Westwind.Web.WebApi.JsonpFormatter.JsonpCallbackFunction">
            <summary>
            Captured name of the Jsonp function that the JSON call
            is wrapped in. Set in GetPerRequestFormatter Instance
            </summary>
        </member>
        <member name="M:Westwind.Web.WebApi.JsonpFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Override this method to capture the Request object
            </summary>
            <param name="type"></param>
            <param name="request"></param>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebApi.JsonpFormatter.GetJsonCallbackFunction(System.Net.Http.HttpRequestMessage)">
            <summary>
            Retrieves the Jsonp Callback function
            from the query string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.WebApi.BasicAuthenticationHandler">
            <summary>
            MessageHandler implementation of BasicAuthentication.
            This handler parses out Authorization headers into a
            BasicAuthenticationIdentity and sets it on the thread principle.
            
            Fires Authentication challenge on outbound 401 Unauthorized responses
            </summary>
        </member>
        <member name="M:Westwind.Web.WebApi.BasicAuthenticationHandler.ParseAuthorizationHeader(System.Net.Http.HttpRequestMessage)">
            <summary>
            Parses the Authorization header and creates user credentials
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="M:Westwind.Web.WebApi.BasicAuthenticationHandler.Challenge(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
            <summary>
            Send the Authentication Challenge request
            </summary>
            <param name="message"></param>
            <param name="actionContext"></param>
        </member>
        <member name="T:Westwind.Web.WebApi.BasicAuthenticationIdentity">
            <summary>
            Custom Identity that adds a password captured by basic authentication
            to allow for an auth filter to do custom authorization
            </summary>
        </member>
        <member name="P:Westwind.Web.WebApi.BasicAuthenticationIdentity.Password">
            <summary>
            Basic Auth Password for custom authentication
            </summary>
        </member>
        <member name="M:System.Web.Http.ApiControllerExtensions.ThrowHttpException(System.Web.Http.ApiController,System.Net.HttpStatusCode,System.String)">
            <summary>
            Throws a safe exception that results in a consistent error message being returned.
            </summary>
            <param name="statusCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:System.Web.Http.ApiControllerExtensions.ThrowHttpException(System.Web.Http.ApiController,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Turn a regular exception into an ApiMessageError exception to display for the client.
            </summary>
            <param name="controller"></param>
            <param name="statusCode"></param>
            <param name="ex"></param>
        </member>
        <member name="M:System.Web.Http.ApiControllerExtensions.ThrowHttpException(System.Web.Http.ApiController,System.Net.HttpStatusCode)">
            <summary>
            Just returns an empty response with just the specified status code. No error message is sent.
            </summary>
            <param name="controller"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:System.Web.Http.HttpRequestMessageExtensions">
            <summary>
            Extends the HttpRequestMessage collection
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.GetQueryStrings(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a dictionary of QueryStrings that's easier to work with 
            than GetQueryNameValuePairs KevValuePairs collection.
            
            If you need to pull a few single values use GetQueryString instead.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.GetQueryString(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Returns an individual querystring value
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.GetHeader(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Returns an individual HTTP Header value
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.GetCookie(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Retrieves an individual cookie from the cookies collection
            </summary>
            <param name="request"></param>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
