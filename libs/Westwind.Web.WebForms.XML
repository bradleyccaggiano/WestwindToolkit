<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Web.WebForms</name>
    </assembly>
    <members>
        <member name="T:Westwind.Web.ClientScriptProxy">
            <summary>
            This is a proxy object for the Page.ClientScript and MS Ajax ScriptManager 
            object that can operate when MS Ajax when present otherwise falling back to
             Page.ClientScript. Because MS Ajax may not be available accessing the 
            methods directly is not possible and we are required to indirectly 
            reference client script methods through this class.
            
            This class should be invoked at the Control's start up and be used to 
            replace all calls Page.ClientScript. Scriptmanager calls are made through 
            Reflection indirectly so there's no dependency on the script manager.
            
            This class also provides a few additional page injection helpers like the 
            abillity to load scripts in the page header (rather than in the body) and 
            to use script compression using wwScriptCompressionModule without using MS 
            Ajax.
            </summary>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy.DefaultScriptRenderMode">
            <summary>
            Determines the default script rendering mode that is uses if no script rendering mode
            is explicitly provided on the control.
            
            This setting is global and should be set only once in Appplication_Start or
            a static constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Westwind.Web.ClientScriptProxy.ScriptResourceAliases" -->
        <member name="F:Westwind.Web.ClientScriptProxy._IsMsAjax">
            <summary>
            Internal global static that gets set when IsMsAjax() is
            called. The result is cached once per application so 
            we don't have keep making reflection calls for each access
            </summary>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy._CheckedForMsAjax">
            <summary>
            Flag that determines whether check was previously done
            </summary>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy._IsScriptManagerOnPage">
            <summary>
            Cached value to see whether the script manager is
            on the page. This value caches here once per page.
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.#ctor">
            <summary>
            No public constructor - use ClientScriptProxy.Current to
            get an instance to ensure you once have one instance per
            page active.
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.ClearContextItemsOnTransfer">
            <summary>
            Clears all the request specific context items which are script references
            and the script placement index.
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.IsMsAjax">
            <summary>
            Checks to see if MS Ajax is registered with the current
            Web application.
            
            Note: Method is static so it can be directly accessed from
            anywhere. If you use the IsMsAjax property to check the
            value this method fires only once per application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.IsScriptManagerOnPage(System.Web.UI.Page)">
            <summary>
            Checks to see if a script manager is on the page
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.LoadControlScript(System.Web.UI.Control,System.String,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            High level helper function  that is used to load script resources for various AJAX controls
            Loads a script resource based on the following scriptLocation values:
            
            * WebResource
              Loads the Web Resource specified out of ControlResources. Specify the resource
              that applied in the resourceName parameter
              
            * Url/RelativeUrl
              loads the url with ResolveUrl applied
              
            * empty string (no value) 
              No action is taken and nothing is embedded into the page. Use this if you manually
              want to load resources
            </summary>
            <param name="control">The control instance for which the resource is to be loaded</param>
            <param name="scriptLocation">WebResource, a virtual path or a full Url. Empty to not embed any script refs (ie. user loads script herself)</param>
            <param name="resourceName">The name of the resource when WebResource is used for scriptLocation null otherwise</param>
            <param name="topOfHeader">Determines if scripts are loaded into the header whether they load at the top or bottom</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            Returns a WebResource or ScriptResource URL for script resources that are to be
            embedded as script includes.
            </summary>
            <param name="control">Any control</param>
            <param name="type">A type in assembly where resources are located</param>
            <param name="resourceName">Name of the resource to load</param>
            <param name="renderMode">Determines where in the document the link is rendered</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)">
            <summary>
            Registers a script include tag into the page for an external script url.
            
            This version embeds only in the body of the HTML document - ie. underneath the form tag      
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="url"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            Registers a client script reference into the page with the option to specify
            the script location in the page
            </summary>
            <param name="control">Any control instance - typically page</param>
            <param name="type">Type that acts as qualifier (uniqueness)</param>
            <param name="url">the Url to the script resource</param>
            <param name="ScriptRenderModes">Determines where the script is rendered</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterCssResource(System.Web.UI.Control,System.Type,System.String)">
            <summary>
            Registers a CSS Web Resource in the page
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy.cssLinks">
            <summary>
            Keep track of keys that were written
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterCssLink(System.Web.UI.Control,System.Type,System.String,System.String)">
            <summary>
            Registers a CSS stylesheet in the page header and if that's not accessible inside of the form tag.
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="url"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Registers a client script block in the page.
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="script"></param>
            <param name="addScriptTags"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean,Westwind.Web.ScriptRenderModes)">
            <summary>
            Renders client script block with the option of rendering the script block in
            the Html header
            
            For this to work Header must be defined as runat="server"
            </summary>
            <param name="control">any control that instance typically page</param>
            <param name="type">Type that identifies this rendering</param>
            <param name="key">unique script block id</param>
            <param name="script">The script code to render</param>
            <param name="addScriptTags">Ignored for header rendering used for all other insertions</param>
            <param name="renderMode">Where the block is rendered</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Registers a startup code snippet that gets placed at the bottom of the page
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="script"></param>
            <param name="addStartupTags"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetWebResourceUrl(System.Web.UI.Control,System.Type,System.String)">
            <summary>
            Returns a WebResource URL for non script resources
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetWebResourceUrl(System.Type,System.String)">
            <summary>
            Returns a WebResource URL for non script resources
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetClientScriptResourceUrl(System.Web.UI.Control,System.Type,System.String)">
            <summary>
            Works like GetWebResourceUrl but can be used with javascript resources
            to allow using of resource compression (if the Script Compression Module is loaded).
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetClientScriptResourceUrl(System.Type,System.String)">
            <summary>
            Works like GetWebResourceUrl but can be used with javascript resources
            to allow using of resource compression (if the module is loaded).
            </summary>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Injects a hidden field into the page
            </summary>
            <param name="control"></param>
            <param name="hiddenFieldName"></param>
            <param name="hiddenFieldInitialValue"></param>
        </member>
        <member name="P:Westwind.Web.ClientScriptProxy.Current">
            <summary>
            Current instance of this class which should always be used to 
            access this object. There are no public constructors to
            ensure the reference is used as a Singleton to further
            ensure that all scripts are written to the same clientscript
            manager.
            </summary>        
        </member>
        <member name="T:Westwind.Web.ScriptRenderModes">
            <summary>
            Determines how scripts are included into the page
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.Inherit">
            <summary>
            Inherits the setting from the control or from the ClientScript.DefaultScriptRenderMode
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Westwind.Web.ScriptRenderModes.Inline" -->
        <member name="F:Westwind.Web.ScriptRenderModes.Header">
            <summary>
            Renders the script include into the bottom of the header of the page
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.HeaderTop">
            <summary>
            Renders the script include into the top of the header of the page
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.Script">
            <summary>
            Uses ClientScript or ScriptManager to embed the script include to
            provide standard ASP.NET style rendering in the HTML body.
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.BottomOfPage">
            <summary>
            Renders script at the bottom of the page before the last Page.Controls
            literal control. Note this may result in unexpected behavior 
            if /body and /html are not the last thing in the markup page.
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.Alias">
            <summary>
            An alias/shortcut resource name
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.FileId">
            <summary>
            The name of the script file that this resource maps to. Should be just
            the filename (ie. jquery.js or ww.jquery.js) as well as min.js versions
            if those files are loaded as well
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.Resource">
            <summary>
            The full resource name to the resourceToFileItem
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.ControlType">
            <summary>
            Any type in the assembly that contains the script resource
            If null looks in the current executing assembly.
            </summary>
        </member>
        <member name="T:Westwind.Web.JavaScriptMinifier">
            <summary>
            JavaScript minifier strips white space and comments from JavaScript 
            code. Based on Douglas Crockford's JavaScript Minifier with some modification
            to support string and StreamReader conversions.
            
            This class can minify strings in memory or files and entire directories of
            disk files.
            
            The MinifyDirectory() method can be used in the build process for VS or 
            can easily be used at application startup to automatically create minified
            script files for an application.
            </summary>
        </member>
        <member name="M:Westwind.Web.JavaScriptMinifier.Minify(System.String,System.String)">
            <summary>
            Minifies a source file into a target file.
            </summary>
            <param name="sourceFile">Source file that is to be compressed</param>
            <param name="targetFile">Target file that is to contain the compressed output</param>
        </member>
        <member name="M:Westwind.Web.JavaScriptMinifier.MinifyString(System.String)">
            <summary>
            Minifies a JavaScript code string into a minified string.
            </summary>
            <param name="sourceJavaScriptString">Input Javascript string to be minified</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JavaScriptMinifier.MinifyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Minifies all JavaScript files in a given directory and writes out the 
            minified files to a new file extensions (.min.js for example).
            
            This method can be integrated into the build process, or as part of an 
            application's startup to always create new minified scripts as needed. 
            Scripts are only minified if the minified files don't already exist and are
             older than the corresponding JavaScript file.
            
            A common usage scenario is to call this static method from 
            Application_Start:
            
            &lt;&lt;code lang="C#"&gt;&gt;void Application_Start(object sender, 
            EventArgs e)
            {
                // creates minify scripts if don't exist or are changed
                // NOTE: REQUIRES that IIS/ASP.NET Account has writes to write 
            here!
                
            Westwind.Web.Controls.JavaScriptMinifier.MinifyDirectory(Server.MapPath("~/
            scripts"), ".min.js", true);
            }&lt;&lt;/code&gt;&gt;
            
            to always ensure minified files are in sync with corresponding JavaScript 
            files.
            <seealso>Class JavaScriptMinifier                                                        </seealso>
            </summary>
            <param name="path">
            The path where files are to be minfied
            </param>
            <param name="minExtension">
            The extension for the minified files (ie. .min.js). Include leading dot!
            </param>
            <param name="recursive">
            Determines whether nested directories are also included
            </param>
            <remarks>
            Note that if you use this script from within an ASP.NET application it's 
            best to hook it to a Application_Start or a static constructor so it only 
            fires once.
            
            When called from ASP.NET this routine REQUIRES that the server account that
             ASP.NET/IIS AppPool runs under (NETWORK SERVICE by default) has rights to 
            write out the file to the folder specified. Otherwise an exception occurs.
            </remarks>
        </member>
        <member name="T:Westwind.Web.ScriptVariables">
            <summary>
            Provides an easy way for server code to publish strings into client script 
            code. This object basically provides a mechanism for adding key value pairs
             and embedding those values into an object that is hosted on the client.
            
            This component supports:&lt;&lt;ul&gt;&gt;
            &lt;&lt;li&gt;&gt; Creating individual client side variables
            &lt;&lt;li&gt;&gt; Dynamic values that are 'evaluated' in OnPreRender to 
            pick up a value
            &lt;&lt;li&gt;&gt; Creating properties of ClientIDs for a given container
            &lt;&lt;li&gt;&gt; Changing the object values and POSTing them back on 
            Postback
            &lt;&lt;/ul&gt;&gt;
            
            You create a script variables instance and add new keys to it:
            &lt;&lt;code lang="C#"&gt;&gt;
            ScriptVariables scriptVars = new ScriptVariables(this,"scriptVars");
            
            // Simple value
            scriptVars.Add("userToken", UserToken);
            
            AmazonBook tbook = new AmazonBook();
            tbook.Entered = DateTime.Now;
            
            // Complex value marshalled
            scriptVars.Add("emptyBook", tbook);
            
            scriptVars.AddDynamic("author", txtAuthor,"Text");
            
            // Cause all client ids to be rendered as scriptVars.formFieldId vars (Id 
            postfix)
            scriptVars.AddClientIds(Form,true);
            &lt;&lt;/code&gt;&gt;
            
            In client code you can then access these variables:
            &lt;&lt;code lang="JavaScript"&gt;&gt;$( function() {
            	alert(scriptVars.book.Author);
            	alert(scriptVars.author);
            	alert( $("#" + scriptVars.txtAmazonUrlId).val() );
            });&lt;&lt;/code&gt;&gt;
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.ScriptVars">
            <summary>Edit
            Internally holds all script variables declared
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.Page">
            <summary>
            Internally tracked reference to the Page object
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.JsonSerializer">
            <summary>
            Internal instance of the Json Serializer used to serialize
            the object and deserialize the updateable fields
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.sbPrefixScriptCode">
            <summary>
            Internally tracked prefix code
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.sbPostFixScriptCode">
            <summary>
            Internally tracked postfix code
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.SubmitCounter">
            <summary>
            Internal counter for submit script embedded
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Full constructor that receives an instance of any control object
            and the client name of the generated script object that contains
            the specified properties.
            </summary>
            <param name="control"></param>
            <param name="clientObjectName"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.#ctor(System.Web.UI.Control)">
            <summary>
            This constructor only takes an instance of a Control. The name of the
            client object generated will be serverVars.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.#ctor">
            <summary>
            This constructor can only be called AFTER a page instance has been created.
            This means OnInit() or later, but not in the constructor of the page.
            
            The name of the client object generated will be serverVars.
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.Page_PreRenderComplete(System.Object,System.EventArgs)">
            <summary>
            Implemented after Page's OnPreRender() has fired to ensure all
            page code has a chance to write script variables.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.Add(System.String,System.Object)">
            <summary>
            Adds a property and value to the client side object to be rendered into 
            JavaScript code. VariableName becomes a property on the object and the 
            value will be properly converted into JavaScript Compatible JSON text.
            <seealso>Class ScriptVariables</seealso>
            </summary>
            <param name="variableName">
            The name of the property created on the client object.
            </param>
            <param name="value">
            The value that is to be assigned. Can be any simple type and most complex 
            objects that can be serialized into JSON.
            </param>
            <example>
            &amp;lt;&amp;lt;code 
            lang=&amp;quot;C#&amp;quot;&amp;gt;&amp;gt;ScriptVariables scriptVars = new
             ScriptVariables(this,&amp;quot;serverVars&amp;quot;);
            
            // Add simple values
            scriptVars.Add(&amp;quot;name&amp;quot;,&amp;quot;Rick&amp;quot;);
            scriptVars.Add(&amp;quot;pageLoadTime&amp;quot;,DateTime.Now);
            
            // Add objects
            AmazonBook amazon = new AmazonBook();
            bookEntity book = amazon.New();
            
            scripVars.Add(&amp;quot;book&amp;quot;,book);
            &amp;lt;&amp;lt;/code&amp;gt;&amp;gt;
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.ScriptVariables.AddDynamicValue(System.String,System.Object,System.String)" -->
        <member name="M:Westwind.Web.ScriptVariables.AddClientIds(System.Web.UI.Control,System.Boolean)">
            <summary>
            Adds all the client ids for a container as properties of the client object.
             The name of the property is the ID + "Id" Example: txtNameId
            
            Note that there's no attempt made to  resolve naming conflicts in different
             naming containers. If there's a naming conflict last one wins.
            <seealso>Class ScriptVariables</seealso>
            </summary>
            <param name="container">
            The container from which to retrieve Client IDs. You can use Form or 
            this for the top level.
            </param>
            <param name="recursive">
            Determines whether ClientIDs are retrieved recursively by drilling into 
            containers. Use with care - large pages with many controls may take a long 
            time to find and serialize all control Ids. It's best to focus on the 
            controls you are interested and if necesary use multiple AddClientIds() 
            calls.
            </param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.AddClientIds(System.Web.UI.Control)">
            <summary>
            Adds all the client ids for a container as properties of the client object.
             The name of the property is the ID + "Id" Example: txtNameId This version 
            only retrieves ids for the specified container level - no hierarchical 
            recursion of controls is performed.
            <seealso>Class ScriptVariables</seealso>
            </summary>
            <param name="container">
            The container for which to retrieve client IDs.
            </param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.AddScriptBefore(System.String)">
            <summary>
            Any custom JavaScript code that is to immediately preceed the
            client object declaration. This allows setting up of namespaces
            if necesary for scoping.
            </summary>
            <param name="scriptCode"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.AddScriptAfter(System.String)">
            <summary>
            Any custom JavaScript code that is to immediately follow the
            client object declaration. This allows setting up of namespaces
            if necesary for scoping.
            </summary>
            <param name="scriptCode"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.GetValue``1(System.String)">
            <summary>
            Returns a value that has been updated on the client 
            
            Note this method will throw if it is not called
            during PostBack or if AllowUpdates is false.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.GetItemValue``1(System.String)">
            <summary>
            Returns a value from the client Items collection
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.GetClientScript(System.Boolean)">
            <summary>
            Returns the rendered JavaScript for the generated object and name. 
            Note this method returns only the generated object, not the 
            related code to save updates.
            
            You can use this method with MVC Views to embedd generated JavaScript
            into the the View page.
            <param name="addScriptTags">If provided wraps the script text with script tags</param>
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.RenderClientScript">
            <summary>
            Explicitly forces the client script to be rendered into the page.
            This code is called automatically by the configured event handler that
            is hooked to Page_PreRenderComplete
            </summary>
        </member>
        <member name="P:Westwind.Web.ScriptVariables.ClientObjectName">
            <summary>
            The name of the object generated in client script code
            </summary>
        </member>
        <member name="P:Westwind.Web.ScriptVariables.AutoRenderClientScript">
            <summary>
            Determines whether the output object script is rendered
            automatically as part of Page PreRenderComplete. If false
            you can manually call the GetClientScript() method to
            retrieve the script as a string and embed it yourself.
            </summary>        
        </member>
        <member name="P:Westwind.Web.ScriptVariables.UpdateMode">
            <summary>
            Determines how updates to the server from the client are performed.
            If enabled changes to the client side properties post back to the
            server on a full Postback. 
            
            Options allow for none, updating the properties only or updating
            only the Items collection (use .add() on the client to add new items)
            </summary>
        </member>
        <member name="P:Westwind.Web.ScriptVariables.PostBackValue">
            <summary>
            Internal string of the postback value for the field values
            if AllowUpdates is true
            </summary>
        </member>
        <member name="T:Westwind.Web.WebForms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.BitmapOutputReturnedMustSpecifyAContentType">
            <summary>
              Looks up a localized string similar to Bitmap output returned must specify a Content type. For example: [CallbackMethod(ContentType=&quot;image/png&quot;)].
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.CanTGetValuesIfAllowUpdatesIsNotSetToTrue">
            <summary>
              Looks up a localized string similar to Can&apos;t get values if AllowUpdates is not set to true.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_CLASSWRAPPER_FORWCFASMX_REQUIRES_CLIENTPROXYTYPE">
            <summary>
              Looks up a localized string similar to In order to call a Wcf or ASMX service you have to specify ClientProxyTargetType of the Web Service instance..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_INVALID_JSON_STRING">
            <summary>
              Looks up a localized string similar to Invalid JSON string input..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_ONLYONE_SCRIPTCONTAINER_PER_PAGE_ALLOWED">
            <summary>
              Looks up a localized string similar to Only one ScriptContainer is allowed per page..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_ScriptContainer_OnlyWorks_With_PageBasedHandlers">
            <summary>
              Looks up a localized string similar to ScriptContainer.Current only works with Page based handlers..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_UnableToConvertContentTypeToImageFormat">
            <summary>
              Looks up a localized string similar to Unable to convert content type {0} to ImageFormat.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_UnableToConvertImageFormatToContentType">
            <summary>
              Looks up a localized string similar to Unable to convert ImageFormat {0} to ContentType.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidBindingSource">
            <summary>
              Looks up a localized string similar to Invalid BindingSource.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidControl">
            <summary>
              Looks up a localized string similar to Invalid Control.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidControlId">
            <summary>
              Looks up a localized string similar to Invalid Control Id.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidServerMethod">
            <summary>
              Looks up a localized string similar to Invalid Server Method..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidURLRelativeURLNotAllowed">
            <summary>
              Looks up a localized string similar to Invalid URL: Virtual path relative URL (~) not allowed when HttpContext not available..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.NotAllowedMethodExpectsVerb">
            <summary>
              Looks up a localized string similar to Not allowed. Method expects {0}..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ServerMethodIsNotAccessibleDueToMissing">
            <summary>
              Looks up a localized string similar to Server method is not accessible due to missing CallbackMethod attribute.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.UnsupportedJSONSerializerSpecified">
            <summary>
              Looks up a localized string similar to Unsupported JSON Serializer specified. Json.Net and System.Web.Extensions must be explicitly compiled in..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.WebResourceNotAvailableForJQueryUI">
            <summary>
              Looks up a localized string similar to WebResource not available for jQuery UI.
            </summary>
        </member>
    </members>
</doc>
