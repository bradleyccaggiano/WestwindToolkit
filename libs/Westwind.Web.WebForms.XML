<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Web.WebForms</name>
    </assembly>
    <members>
        <member name="T:Westwind.Web.WebForms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.BitmapOutputReturnedMustSpecifyAContentType">
            <summary>
              Looks up a localized string similar to Bitmap output returned must specify a Content type. For example: [CallbackMethod(ContentType=&quot;image/png&quot;)].
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.CanTGetValuesIfAllowUpdatesIsNotSetToTrue">
            <summary>
              Looks up a localized string similar to Can&apos;t get values if AllowUpdates is not set to true.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_CLASSWRAPPER_FORWCFASMX_REQUIRES_CLIENTPROXYTYPE">
            <summary>
              Looks up a localized string similar to In order to call a Wcf or ASMX service you have to specify ClientProxyTargetType of the Web Service instance..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_INVALID_JSON_STRING">
            <summary>
              Looks up a localized string similar to Invalid JSON string input..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_ONLYONE_SCRIPTCONTAINER_PER_PAGE_ALLOWED">
            <summary>
              Looks up a localized string similar to Only one ScriptContainer is allowed per page..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_ScriptContainer_OnlyWorks_With_PageBasedHandlers">
            <summary>
              Looks up a localized string similar to ScriptContainer.Current only works with Page based handlers..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_UnableToConvertContentTypeToImageFormat">
            <summary>
              Looks up a localized string similar to Unable to convert content type {0} to ImageFormat.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ERROR_UnableToConvertImageFormatToContentType">
            <summary>
              Looks up a localized string similar to Unable to convert ImageFormat {0} to ContentType.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidBindingSource">
            <summary>
              Looks up a localized string similar to Invalid BindingSource.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidControl">
            <summary>
              Looks up a localized string similar to Invalid Control.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidControlId">
            <summary>
              Looks up a localized string similar to Invalid Control Id.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidServerMethod">
            <summary>
              Looks up a localized string similar to Invalid Server Method..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.InvalidURLRelativeURLNotAllowed">
            <summary>
              Looks up a localized string similar to Invalid URL: Virtual path relative URL (~) not allowed when HttpContext not available..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.NotAllowedMethodExpectsVerb">
            <summary>
              Looks up a localized string similar to Not allowed. Method expects {0}..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.ServerMethodIsNotAccessibleDueToMissing">
            <summary>
              Looks up a localized string similar to Server method is not accessible due to missing CallbackMethod attribute.
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.UnsupportedJSONSerializerSpecified">
            <summary>
              Looks up a localized string similar to Unsupported JSON Serializer specified. Json.Net and System.Web.Extensions must be explicitly compiled in..
            </summary>
        </member>
        <member name="P:Westwind.Web.WebForms.Properties.Resources.WebResourceNotAvailableForJQueryUI">
            <summary>
              Looks up a localized string similar to WebResource not available for jQuery UI.
            </summary>
        </member>
        <member name="T:Westwind.Web.WebResources">
            <summary>
            Class is used as to consolidate access to resources
            </summary>
        </member>
        <member name="M:Westwind.Web.WebResources.GetStringResource(System.Reflection.Assembly,System.String)">
            <summary>
            Returns a string resource from a given assembly.
            </summary>
            <param name="assembly">Assembly reference (ie. typeof(ControlResources).Assembly) </param>
            <param name="ResourceName">Name of the resource to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebResources.GetStringResource(System.String)">
            <summary>
            Returns a string resource from the from the ControlResources Assembly
            </summary>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.Controls.AjaxMethodCallback">
            <summary>
            The AjaxMethodCallback control provides an easy mechanism for making page or 
            control level method callbacks from an HTML page. Working with both client 
            side and server side logic you can make remote method calls from the client
             using two-way JSON serialization to access server side content from client
             pages.
            Methods are mapped from server to the client with an optional client proxy 
            class that allows making direct method calls to the server. Methods on the 
            server are marked up with a [CallbackMethod] to indicate that the methods 
            are accessible for callbacks. These methods can be implemented on the page,
             any user control, or custom server control. The latter also allows control
             developers to dynamically route callbacks to their own controls.
            
            Methods called use JSON to pass data and simple types, hierarchical 
            objects, arrays and IList based classes are supported for two-way 
            transfers. DataSets/DataTables/DataRows are support for downloading only at
             this time.
            
            This control makes accessing server side content as easy as calling a 
            single proxy method and implementing a single client side handler to 
            receive the result value as a strongly typed object.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.AjaxMethodCallback.ClientScriptProxy">
            <summary>
            Wrapper ClientScript used to allow use ScriptManager methods
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.OnPreRender(System.EventArgs)">
            <summary>
            This method just builds the various JavaScript blocks as strings
            and assigns them to the ClientScript object.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.GenerateControlSpecificJavaScript">
            <summary>
            Generates the ControlSpecific JavaScript. This script is safe to
            allow multiple callbacks to run simultaneously.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.GenerateClassWrapperForCallbackMethods">
            <summary>
            Creates the JavaScript client side object that matches the 
            server side method signature. The JScript function maps
            to a CallMethod() call on the client.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.CreateControlInstanceOnPage(System.Web.UI.Control,System.Object)">
            <summary>
            Can be called to create a new instance of the AjaxMethodCallbackControl
            and attach it to the current page. This can be useful for control developers
            so they don't have to manually add the control to the page.
            
            The call to this method should be made pre-OnLoad() preferrably in OnInit().
            </summary>
            <param name="page">Instance of the Page object</param>
            <returns>An instance of the Callback Control</returns>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ServerUrl">
            <summary>
            The Url to hit on the server for the callback to return the result. Note: Not used when doing a MethodCallback
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.Timeout">
            <summary>
            Timeout in milliseconds for the request.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.IsCallback">
            <summary>
            Determines whether the current request is in a callback. 
            
            This property is used internally to trap for method processing, but you can
            also use this in your page or control level code to determine whether you 
            need to do any special processing based on the callback situation.        
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.PostBackMode">
            <summary>
            Detemines how data is sent back to the server on a method call.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.PostBackFormName">
            <summary>
            The name of the form from which POST data is sent to the server if 
            posting back with form data. Empty value will post back all 
            form variables of all forms.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.PageProcessingMode">
            <summary>
            Determines when Page level callbacks are processed in the Page pipeline.
            By default processing occurs in Load, but you can opt to process  
            callbacks in Init for better performance if you don't rely on any page
            specific logic or POST values from controls. 
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ServiceType">
            <summary>
            The type of service to call. For AjaxMethodCallback call the current page, 
            control or CallbackHandler. For WCF and ASMX point at ServerUrl at 
            a WCF or ASMX Service respectively.
            
            This method affects only what type of client proxy is created to allow
            for straight method callbacks and for all but Page callbacks you'll need
            to set the ClientProxyTargetType in code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.JsonDateEncoding">
            <summary>
            Determines how the date format is serialized into JSON.
            
            ISO is used by default since latest browsers support this now.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ScriptLocation">
            <summary>
            Determines where the ww.jquery.js resource is loaded from. WebResources, Url or an empty string (no resource loaded)
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.jQueryScriptLocation">
            <summary>
            Determines where the jquery.js resource is loaded from. WebResources, Url or leave empty to do nothing
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.TargetInstance">
            <summary>
            An instance of the object that is going to handle the callbacks on the
            the server. 
            
            If not set defaults to the Page.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ClientProxyTargetType">
            <summary>
            A type that is used to generate the Client Proxy Javascript
            class that gets injected into the page with matching methods.
            
            This property defaults to the current Page's type, but you can
            override it to any object's type that matches your TargetInstance.
            
            You can pass null to indicate you don't want to generate a proxy
            and instead call Proxy.callMethod explicitly which is a little more
            light weight in terms of processing and Javascript generation.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.GenerateClientProxyClass">
            <summary>
            If true generates a proxy class that maps each of the methods exposed with 
            [CallbackMethod] on the current page, user control or control and exposes 
            it as a client side class. The name of the class will be the same as the ID
             of the AjaxMethodCallback control.
            
            By default the class is generated. If false the class is not generated and 
            you can use the client side AjaxMethodCallback object and use declaritive 
            code to create the method callbacks manually.
            <seealso>Class AjaxMethodCallback</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.UniqueID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ClientID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.OverrideClientID">
            <summary>
            Determines whether ClientID and UniqueID values are returned
            as just as the ID or use full naming container syntax.
            
            The default is true which returns the simple ID without
            naming container prefixes.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.AjaxMethodCallbackDesigner">
            <summary>
            Control designer used so we get a grey button display instead of the 
            default label display for the control.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.CallbackProcessingModes">
            <summary>
            Determines when page level callbacks are processed
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.CallbackProcessingModes.PageInit">
            <summary>
            Provides best performance for page callbacks. No page logic accessible
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.CallbackProcessingModes.PageLoad">
            <summary>
            Default behavior fires callback methods in Page Load after ViewState and 
            Form vars have been processed by the pageLoad
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.CallbackProcessingModes.PagePreRender">
            <summary>
            Fires Callback method in PreRender after Load processing is completed.
            Note events on controls may or may not have fired yet.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.AjaxMethodCallbackServiceTypes">
            <summary>
            Determines what kind of client proxy is created
            for you
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.AutoComplete">
            <summary>
            A WebForms wrapper control around the jQuery UI AutoComplete control. This control 
            provides code based AJAX callbacks either to a specified service URL (which allows calls
            to a CallbackHandler HTTP Handler service for example) or directly to the page using an
            event based callback to the controls CallbackHandler event.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.RegisterResources(Westwind.Web.ClientScriptProxy)">
            <summary>
            Code that embeds related resources (.js and css)
            </summary>
            <param name="scriptProxy"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.OnPreRender(System.EventArgs)">
            <summary>
            Most of the work happens here for generating the hook up script code
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.AutoCompleteCallbackHandler(System.String)">
            <summary>
            Method that handles the actual callback routing.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.ServerUrl">
            <summary>
            Service Url to explicitly call to retrieve data. Not used if the OnServiceHandlerCallback event is set.
            Alternately you can implement the CallbackHandler delegate.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.CallbackHandler">
            <summary>
            An EventHandler that allows you to serve AJAX data to the AutoComplete 
            client control. The handler receives a string input of the search term
            typed into the control and should return an array of objects.
            Each object should have at minimum 'label' and 'value' properties.
            
            This event handler should be set in OnInit of page/control
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.AutoFocus">
            <summary>
            Determines whether the selected item in the list will automatically be focused
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.Delay">
            <summary>
            The delay in milliseconds the Autocomplete waits after a keystroke to activate itself. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.MinLength">
            <summary>
            The minimum length of the input string before autocomplete kicks in
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.Theme">
            <summary>
            Theme applied to the base CSS url. Replaces /base/ with the theme selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.CssBasePath">
            <summary>
            The path to the base CSS Theme. Path is adjusted 
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.OnClientSelection">
            <summary>
            The client selection handler called when a selection is made.
            The handler receives two parameter - a ssda
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DragPanel">
            <summary>
            A draggable Panel control that can be dragged around the current browser window.
            Dragging is supported for the panel and initiated through a drag handle control - 
            a control that is contained in the window and acts as the draggable hot spot that
            initiates dragging. You can also make the Panel itself the drag handle.
            
            The control can also optionally display a close button that allows hiding the control
            by changing its client side visibility.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DragPanel.ScriptProxy">
            <summary>
            Internal reference of the Client Script Proxy - set up in OnInit
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.DragHandleID">
            <summary>
            The ID of the control that is used as the drag handle to initiate a drag operation.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Draggable">
            <summary>
            Determines whether this control is draggable
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Cursor">
            <summary>
            The cursor property for the dragged handle or object
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.DragDelay">
            <summary>
            Delay before dragging starts in milliseconds
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Closable">
            <summary>
            Flag that determines whether a closebox is rendered into the &lt;div&gt; 
            specified as a drag handle.        
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.CloseBoxImage">
            <summary>
            Optional Image used for close box if ShowCloseBoxOnDragHandle is true.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.FadeOnClose">
            <summary>
            Fades out the window when it is closed with the close button
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.PanelOpacity">
            <summary>
            Optional Opacity level in decimal percentage values (ie. 0.65 for 65%) for the panel background. Supported only in Mozilla and IE browsers. The value is given as fractional percentage.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ShadowOffset">
            <summary>
            Optionally used to specify a shadow below the panel. If 0 no shadow is created. If greater than 0 the panel is rendered.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ShadowOpacity">
            <summary>
            The opacity of the Panel's shadow if PanelShadoOffset is set.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Centered">
            <summary>
            Determines whether the panel is centered in the page
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ClientDialogHandler">
            <summary>
            Client side event handler that is called whenever a click event occurs anywhere inside of the
            modal dialog.
            
            Client handler is a jQuery event handler and receives this as the element clicked plus
            the standard jQuery event object. You can check id and match against specific 
            control ids:
            
            if (id == "btnClose") doA();
            if (id == "btnCancel") doB();
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ScriptLocation">
            <summary>
            Determines where the ww.jquery.js resource is loaded from. WebResources, Url or an empty string (no resource loaded)
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.jQueryScriptLocation">
            <summary>
            Determines where the jquery.js resource is loaded from. WebResources, Url or leave empty to do nothing
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.HoverPanel">
            <summary>
            The HoverPanel class provides an easy to use base AJAX control that  
            allows quick access to server side content from a URL and embed it into the
             control's content. The control provides various visual customization 
            aspects from shadows, transparency, the ability to drag it around and close
             it as well as pop up and auto hide.
            
            The most prominent feature of this control is to provide auto-popup 
            functionality that shows context sensitive content while hovering and 
            hiding it when moving off.
            
            &lt;&lt;img src="images/HoverWindow.png"&gt;&gt;
            
            For more details on how the control works, see the 
            <see cref="!:_1Q100DYWK">HoverPanel Windows</see> topic. 
            This control  allows calling back to explict URLs
            either on the same page or calling other URLs within the same site that 
            feed the content to be rendered in the  hover panel control.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.HoverPanel.#ctor">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.HoverPanel.OnPreRender(System.EventArgs)" -->
        <member name="M:Westwind.Web.Controls.HoverPanel.GenerateControlSpecificJavaScript">
            <summary>
            Generates the ControlSpecific JavaScript. This script is safe to
            allow multiple callbacks to run simultaneously.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.HoverPanel.GetCallbackEventReference(System.String)">
            <summary>
            Returns an Event Callback reference string that can be used in Client
            script to initiate a callback request. 
            </summary>
            <param name="QueryStringExpression">
            An expression that is evaluated in script code and embedded as the second parameter.
            The value of this second parameter is interpreted as a QueryString to the URL that
            is fired in response to the request to the server.
            
            This expression can be a static string or any value or expression that is in scope
            at the time of calling the event method. The expression must evaluate to a string
             
            Example: 
            string GetCallbackEventReference("'CustomerId=' + forms[0].txtCustomerId.value + "'");
             
            A callback event reference result looks like this:
            
            ControlID_StartCallback(event,'CustomerId=_12312')
            </param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.ClientCompleteHandler">
            <summary>
            The client script event handler function called when the remote call 
            completes just before the result content is displayed. Allows modification 
            of the content and possibly blocking of the content by returning false.
            
            For more information see the HoverPanel client class and its 
            <see cref="!:_1WD06AVLG">callbackHandler method</see>. The handler is  passed the result from the 
            callback and you can return false to stop  rendering of the hover window.
            <seealso>Class HoverPanel</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.ServerUrl">
            <summary>
            The Url to hit on the server for the callback to return the result. Note: Not used when doing a MethodCallback
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.Timeout">
            <summary>
            The timeout for the server request to retrieve data in milliseconds
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.NavigateDelay">
            <summary>
            Determines if the navigation is delayed by a hesitation. Useful for link hovering.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.IsCallback">
            <summary>
            Determines whether this request is a callbackDetermines whether the current
             request is a callback from the AjaxMethodCallback or HoverPanel control.
            
            This property is used internally to trap for method processing, but you can
             also use this in your page or control level code to determine whether you 
            need to do any special processing based on the callback situation.
            <seealso>Class HoverPanel</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.EventHandlerMode">
            <summary>
            Determines the how the event is handled  on the callback request. ShowHtmlMousePosition shows the result in a window. CallEventHandler fires the specified script function.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.HtmlTargetClientId">
            <summary>
            The client ID of the control that receives the hoverpanel output. This affects only the HTML if empty the hoverpanel is used.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.AdjustWindowPosition">
            <summary>
            if set tries to move up the window if it's too low to fit content. This setting can cause problems with very large content.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.AutoCloseHoverWindow">
            <summary>
            Determines whether the window is closed automatically if you mouse off it
            when the window is a hover window.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.HoverOffsetRight">
            <summary>
            The right offset when the the panel is shown at the mouse position
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.HoverOffsetBottom">
            <summary>
            The bottom offset when the the panel is shown at the mouse position
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.PostBackMode">
            <summary>
            If true causes the page to post back all form variables.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.PostBackFormName">
            <summary>
            The name of the form from which values are posted back to the server. Note only a single form's 
            values can be posted back!
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.IFrameHeight">
            <summary>
            The height of an IFRAME if mode is IFrame related. Use this if you need to specifically size the IFRAME within the rendered panel to get the size just right.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.UniqueID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.ClientID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.OverrideClientID">
            <summary>
            Determines whether ClientID and UniqueID values are returned
            as just as the ID or use full naming container syntax.
            
            The default is true which returns the simple ID without
            naming container prefixes.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowHtmlAtMousePosition">
            <summary>
            Displays a hover window at the current mouse position. Calls a URL 
            specified in the ServerUrl property when the call is initiated. The call 
            initiation can add an additional queryString to specify 'parameters' for 
            the request.
            <seealso>Enumeration HoverEventHandlerModes</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowHtmlInPanel">
            <summary>
            Shows the result of the URL in the panel. Works like ShowHtmlInPanel
            except that the panel is not moved when the callback completes.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowIFrameAtMousePosition">
            <summary>
            Displays a URL in an IFRAME which is independent of the
            current page.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowIFrameInPanel">
            <summary>
            Shows an IFRAME in a panel
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.GetHttpResponse">
            <summary>
            Calls an external Page and returns the HTML result into the 
            ClientEventHandler specified for the control. This is a really high level 
            mechanism.
            <seealso>Enumeration HoverEventHandlerModes</seealso>
            </summary>        
        </member>
        <member name="T:Westwind.Web.Controls.jQueryDatePicker">
            <summary>
            ASP.NET jQuery DatePicker Control Wrapper
            by Rick Strahl
            http://www.west-wind.com/
            
            License: Free
            
            Simple DatePicker control that uses jQuery UI DatePicker to pop up 
            a date picker. 
            
            Important Requirements:
            ~/scripts/jquery.js             (available from WebResource)
            ~/scripts/jquery-ui.js   (custom build of jQuery.ui)
            ~/scripts/themes/base           (choose any theme name one theme to display styling)
            
            Resources are embedded into the assembly so you don't need
            to reference or distribute anything. You can however override
            each of these resources with relative URL based resources.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.jQueryDatePicker.RegisterResources(Westwind.Web.ClientScriptProxy)">
            <summary>
            Code that embeds related resources (.js and css)
            </summary>
            <param name="scriptProxy"></param>
        </member>
        <member name="M:Westwind.Web.Controls.jQueryDatePicker.OnPreRender(System.EventArgs)">
            <summary>
            Most of the work happens here for generating the hook up script code
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.jQueryDatePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.SelectedDate">
            <summary>
            The currently selected date
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.DisplayMode">
            <summary>
            Determines how the datepicking option is activated
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.ButtonImage">
            <summary>
            Url to a Calendar Image or WebResource to use the default resource image.
            Applies only if the DisplayMode = ImageButton
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.CalendarCss">
            <summary>
            The CSS that is used for the calendar
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.Theme">
            <summary>
            Theme applied to the base CSS url. Replaces /base/ with the theme selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.CalendarJs">
            <summary>
            Location for the calendar JavaScript
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.jQueryJs">
            <summary>
            Location of jQuery library. Use WebResource for loading from resources
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.DateFormat">
            <summary>
            Determines the Date Format used. Auto uses CurrentCulture. Format: MDY/  month, date,year separator
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.MinDate">
            <summary>
            Minumum allowable date. Leave blank to allow any date
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.MaxDate">
            <summary>
            Maximum allowable date. Leave blank to allow any date.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.OnClientSelect">
            <summary>
            Client event handler fired when a date is selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.OnClientBeforeShow">
            <summary>
            Client event handler that fires before the date picker is activated
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.ShowButtonPanel">
            <summary>
            Determines where the Close icon is displayed. True = top, false = bottom.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ModalDialog">
            <summary>
            This control allows creating client side pop up window that blocks out the 
            background and brings a dialog to the foreground. This control can be  used
             to replace ugly alert or prompt boxes to pop up rich dialogs that must  be
             edited modally. Any dialog can be popped up like 
            
            The background can be just an opaque color with a transparency value - the 
            default is black at 70% for example which gives a grey looking overlay - or
             can be a custom Html element that is expanded and then made transparent as
             in the following figure.
            
            &lt;&lt;img src="images/wwModalDialog.png"&gt;&gt;
            
            The control is based on DragPanel so the dialogs can be draggable and 
            closable. Events are available to fire when a button or the close button is
             clicked with event firing either on the client or server.
            
            The client side counter part class can be used without this server side  
            control and allows a few extra features, such as a mechanism to display a  
            dialog without controls on the page to map to.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.ModalDialog.Show">
            <summary>
            Shows the dialog as designed without any customizations
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.ModalDialog.Show(System.String,System.String,System.Boolean)" -->
        <member name="P:Westwind.Web.Controls.ModalDialog.BackgroundOpacity">
            <summary>
            The opacity of of the overlay background in a decimal percentage. Default to .85
            </summary>    
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.ContentId">
            <summary>
            The client ID of the element that receives the content message. 
            If not specified the message is written to the body of the control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.HeaderId">
            <summary>
            ID of a header element that receives the Title when calling showDialog()
            on the client. Optional - if not specified the header is not set which 
            means the dialog displays as designed.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.OverlayId">
            <summary>
            Optional Id that is to be used for the shaded Overlay. This allows you
            to create a colored or otherwise designed background that pops over the
            existing content.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.FadeinBackground">
            <summary>
            When true fades in the background by slowly increasing
            opacity of the background
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.ClientDialogHandler">
            <summary>
            Client side event handler that is fired when anything is clicked inside of the
            dialog. This can be a button, a hyperlink or any element.
            
            The even fired will be a jQuery style event with a jQuery event object passed.
            this points at the clicked element.
            
            Handler code should check for specific elements like buttons clicked and
            then based on the id or value decide what action to take.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.zIndex">
            <summary>
            The zIndex value for the overlay and dialog. This value must be 
            higher than any other control on the page in order for the 
            dialog to pop up on top. 
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.UniqueID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.ClientID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ScriptContainer">
            <summary>
            Class that provides script embedding functionality to ASP.NET pages. 
            Features include the ability to use ResolveUrl style src urls to place 
            script includes inline (to the control), in the Header or using standard 
            ASP.NET ClientScript or ScriptManager. The control can also optimize 
            
            scripts if a .min.js script file is available by using the AllowMinScript 
            property on the script.
            
            The purpose of this control is to provide Intellisense compatible script 
            embedding without requiring the ASP.NET AJAX ScriptManager control since 
            that control automatically includes MS AJAX scripts even if none of the MS 
            AJAX features are otherwise used.
            
            Using markup the control can embed scripts like this:
            
            &lt;&lt;code lang="HTML"&gt;&gt;&lt;ww:ScriptContainer ID="scripts" 
            runat="server" RenderMode="Header"&gt;
                &lt;Scripts&gt;
                    &lt;Script Src="Scripts/jquery.js"  
            Resource="jquery"&gt;&lt;/Script&gt;
                    &lt;Script Src="Scripts/ui.core.js"  
            AllowMinScript="true"&gt;&lt;/Script&gt;
                    &lt;Script Src="Scripts/ui.draggable.js"  &gt;&lt;/Script&gt;
                    &lt;Script Src="Scripts/wwscriptlibrary.js"  
            Resource="wwscriptlibrary"&gt;&lt;/Script&gt;
                    &lt;Script Resource="WebResources.Menu.js" 
            ResourceControl="txtInput" /&gt;
                &lt;/Scripts&gt;
            &lt;/ww:ScriptContainer&gt;
            &lt;&lt;/code&gt;&gt;
            
            The options on the &lt;Script&gt; tag can be found in the 
            <see cref="!:_2EU16Y1L1">ScriptItem class</see>. Unfortunately due to the requirement for an 
            HtmlGeneric control (so Intellisense still works for scripts) there's no 
            Intellisense for the properties of Script elements in markup. They do work 
            however.
            
            Using CodeBehind .NET code, the static Singleton ScriptContainer.Current 
            can be used to add scripts (even if no script instance pre-exists):
            
            &lt;&lt;code lang="C#"&gt;&gt;
            ScriptContainer script = ScriptContainer.Current;
            script.AddScript("~/scripts/wwEditable.js","jquery");  // as  known 
            resource
            script.AddScript("~/scripts/wwEditable.js", true);  // as .min.js
            &lt;&lt;/code&gt;&gt;
            
            Markup scripts always have precendence over scripts embedded in code in 
            terms of rendering order, but you can choose where scripts are rendered to 
            individually - Header, Script, Inline or the default of InheritFromControl.
             This allows some control over where scripts are loaded.
            <seealso>Class ScriptItem</seealso>
            </summary>
            <remarks>
            Only one instance of this component can exist on the page otherwise an 
            exception is thrown.
            </remarks>
        </member>
        <member name="F:Westwind.Web.Controls.ScriptContainer.scriptProxy">
            <summary>
            Internally tracked client script proxy that goes either
            to MS Ajax ScriptManager if available or to Page.ClientScript 
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.OnInit(System.EventArgs)">
            <summary>
            Read the HtmlGeneric Script controls and parse them into
            Internal scripts at page load time
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.OnPreRender(System.EventArgs)">
            <summary>
            Handle writing out scripts to header or 'ASP.NET script body'
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.RegisterScriptItem(Westwind.Web.Controls.ScriptItem)">
            <summary>
            Registers an individual script item in the page
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the scripts contained in this control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(Westwind.Web.Controls.ScriptItem)">
            <summary>
            Adds a script item to the page with full options
            </summary>
            <param name="scriptUrl">The Url to load script from. Can include ~/ syntax</param>
            <param name="renderMode">Determines where the script is rendered</param>
            <param name="allowMinScript">Determines if in non-debug mode .min.js files are used</param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(System.String,Westwind.Web.ScriptRenderModes,System.Boolean)">
            <summary>
            Adds a script to the collection of embedded scripts
            </summary>
            <param name="scriptUrl"></param>
            <param name="renderMode"></param>
            <param name="allowMinScript"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(System.String)">
            <summary>
            Adds a script to the page using the control's rendermode
            </summary>
            <param name="scriptUrl"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(System.String,System.Boolean)">
            <summary>
            Adds a script to the page using the control's rendermode and allows specifying of min.js script files in non-debug mode.
            </summary>
            <param name="scriptUrl"></param>
            <param name="allowMinScript"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.LoadControlScript(System.Web.UI.Control,System.String,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            Helper function that is used to load script resources for various AJAX controls
            Loads a script resource based on the following scriptLocation values:
            
            * WebResource
              Loads the Web Resource specified out of WebResources. Specify the resource
              that applied in the resourceName parameter
              
            * Url/RelativeUrl
              loads the url with ResolveUrl applied
              
            * empty (no value) 
              No action is taken
            </summary>
            <param name="control">The control instance for which the resource is to be loaded</param>
            <param name="scriptLocation">WebResource, a Url or empty (no value)</param>
            <param name="resourceName">The name of the resource when WebResource is used for scriptLocation</param>
            <param name="topOfHeader">Determines if scripts are loaded into the header whether they load at the top or bottom</param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.ParseScriptProperties(System.Web.UI.HtmlControls.HtmlGenericControl)">
            <summary>
            Parses HtmlgenericControl attributes into a script object
            </summary>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.Current">
            <summary>
            Returns a current instance of this control if an instance
            is already loaded on the page. Otherwise a new instance is
            created, added to the Form and returned.
            
            It's important this function is not called too early in the
            page cycle - it should not be called before Page.OnInit().
            
            This property is the preferred way to get a reference to a
            ScriptContainer control that is either already on a page
            or needs to be created. Controls in particular should always
            use this property.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.Scripts">
            <summary>
            Collection of ScriptItems
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.InternalScripts">
            <summary>
            Internally stored list of parsed or manually added Scripts
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.RenderMode">
            <summary>
            Determines where scripts are rendered by default. Defaults to script which renders using ClientScript or ScriptManager.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.MinScriptExtension">
            <summary>
            Script extension for minimized or packed scripts. Used only
            for entries that AllowMinScript=True.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ScriptItem">
            <summary>
            Individual Script Item used inside of a script container.
            This control maps syntax of the standard HTML script tag
            and ads a number of additional properties that are specific
            to script generation.
            
            Note there's no Intellisense on this child item as it is
            rendered as an HtmlGenericControl and parsed into this
            object. Hence the properties below must be manually typed
            in and are not visible to Intellisense.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.Src">
            <summary>
            The src location of the file. This path can include ~ pathing
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.AllowMinScript">
            <summary>
            Determines whether script looks for optimized .min.js file in non-debug mode
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.RenderMode">
            <summary>
            Determines where in the page the script is rendered (HeaderTop,Header,Script,Inline,Inherit)
            <seealso>Class ScriptItem</seealso>
            <seealso>Embedding JavaScript Links with ScriptContainer</seealso>
            <seealso>Enumeration ScriptRenderModes</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.Resource">
            <summary>
            If specified loads a 'known' resource by name from resources rather
            than the script source. This allows using a src url for getting
            debugging but using a WebResource for ensuring the latest version
            is always used at runtime.
            
            Known resources are:
            wwscriptlibrary
            jquery
            calendar
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.ResourceControl">
            <summary>
            A reference to a control in the assembly that holds the resource.
            This is used in lieu of a type so you can specify a control that
            is in the same assembly. Specify an ID in markup or a reference
            in code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.ResourceControlType">
            <summary>
            Instead of providing the Id of a control you can also pass the type of
            a control/object housed in the assembly. The type is used for getting the assembly
            to retrieve resources from.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.FileId">
            <summary>
            The ID for this file when stored in the collection
            of script items. Based on the filename of the script
            (ie. somescript.js). Used to avoid duplication
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.ResourceAssembly">
            <summary>
            Resource assembly - maps to Assembly keyword
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.Version">
            <summary>
            An optional version number that is appended to your
            resource url.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ScriptContainerDesigner">
            <summary>
            Control designer used so we get a grey button display instead of the 
            default label display for the control.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.BindingErrors">
            <summary>
            This class provides a holding container for BindingErrors. BindingErrors 
            occur during binding and unbinding of controls and any errors are stored in
             this collection. This class is used extensively for checking for 
            validation errors and then displaying them with the ToString() or ToHtml() 
            methods.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.BindingErrors.ToHtml">
            <summary>
            Formats all the BindingErrors into a rich list of error messages. The error
             messages are marked up with links to the appropriate controls. Format of 
            the list is a &lt;ul&gt; style list ready to display in an HTML page.
            <seealso>Class BindingErrors</seealso>
            </summary>
            <returns>an Html string of the errors</returns>
        </member>
        <member name="M:Westwind.Web.Controls.BindingErrors.ToString">
            <summary>
            Formats an Binding Errors collection as a string with carriage returns
            </summary>
            <param name="Errors"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.Controls.BindingError">
            <summary>
            Error object used to return error information during databinding.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.BindingError.ClientID">
            <summary>
            The ClientID of the control the error occurred on. This value is used to 
            provide the hot linking to the control.
            <seealso>Class BindingError</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.BindingError.Message">
            <summary>
            The error message that is displayed for the Binding error.
            <seealso>Class BindingError</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.BindingError.ErrorMessage">
            <summary>
            The raw Exception error message. Not used at the moment.
            <seealso>Class BindingError</seealso>
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.RequiredFieldException">
            <summary>
            Exception thrown when a required field is not filled in. Used internally
            for catching these errors and rendering the error.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.BindingErrorException">
            <summary>
            Exception thrown when a BindingError is encountered
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ValidationErrorException">
            <summary>
            An exception fired if a validation error occurs in DataBinding
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBinder">
            <summary>
            The DataBinder class provides two-way, simple databinding a single
            datasource value and single control property. It can bind object properties
            and fields and database values (DataRow fields) to a control property such
            as the Text, Checked or SelectedValue properties. In a nutshell the
            controls acts as a connector between a datasource and the control and
            provides explicit databinding for the control.
            
            The control supports two-way binding. Control can be bound to the
            datasource values and can be unbound by taking control values and storing
            them back into the datasource. The process is performed explicitly by
            calling the DataBind() and Unbind() methods of the control. Controls
            attached to the databinder can also be bound individually.
            
            The control also provides a BindErrors collection which captures any
            binding errors and allows friendly display of these binding errors using
            the ToHtml() method. BindingErrors can be manually added and so application
            level errors can be handled the same way as binding errors. It's also
            possible to pull in ASP.NET Validator control errors.
            
            Simple validation is available with IsRequired for each DataBinding item.
            Additional validation can be performed server side by implementing the
            ValidateControl event which allows you to write application level
            validation code.
            
            This control is implemented as an Extender control that extends any Control
             based class. This means you can databind to ANY control class and its
            properties with this component.
            <seealso>Databinding with DataBinder</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBinder._AutoLoadedDataBoundControls">
            <summary>
            Flag that determines whether controls where auto-loaded from the page.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBinder.ClientScriptProxy">
            <summary>
            Make MS Ajax aware
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.DataBind">
            <summary>
            Performs data binding against each of the defined DataBindingItems defined 
            on the DataBinder control. This binds all BindingSources to the specified 
            control properties.
            
            Typically DataBind is called in the Page_Load() of the page cycle and only 
            when the page originally loads - ie. (if !Page.IsPostPack). Subsequent page
             hits post back values so you typically do not want to rebind values to 
            POST form variables on each hit.
            
            &lt;&lt;code lang="C#"&gt;&gt;
            Invoice.Load(id);   // load data to bind
            
            // bind only on first load or if the product is changed
            if (!IsPostBack || IsProductChange)
               DataBinder.DataBind();
            
            // Manually bind this control always - it's ReadOnly and so doesn't post 
            back
            DataBinder.GetDataBindingItem(txtPk).DataBind();
            &lt;&lt;/code&gt;&gt;
            
            Some controls - non-Postback, or read only controls for example - you will 
            want to rebind explicit each time so make sure those are bound explicitly 
            outside of the !IsPostBack block.
            <seealso>Class DataBinder</seealso>
            </summary>
            <returns>true if there no errors. False otherwise.</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.DataBind(System.Web.UI.Control)">
            <summary>
            Performs data binding against each of the defined DataBindingItems defined 
            on the DataBinder control. This binds all BindingSources to the specified 
            control properties.
            
            Typically DataBind is called in the Page_Load() of the page cycle and only 
            when the page originally loads - ie. (if !Page.IsPostPack). Subsequent page
             hits post back values so you typically do not want to rebind values to 
            POST form variables on each hit.
            
            &lt;&lt;code lang="C#"&gt;&gt;
            Invoice.Load(id);   // load data to bind
            
            // bind only on first load or if the product is changed
            if (!IsPostBack || IsProductChange)
               DataBinder.DataBind(this);
            
            // Manually bind this control always - it's ReadOnly and so doesn't post 
            back
            DataBinder.GetDataBindingItem(txtPk).DataBind();
            &lt;&lt;/code&gt;&gt;
            
            Some controls - non-Postback, or read only controls for example - you will 
            want to rebind explicit each time so make sure those are bound explicitly 
            outside of the !IsPostBack block.
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="Container">
            The top level container that is bound
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.Unbind">
            <summary>
            Unbinds value from controls back into their underlying binding sources for 
            the defined DataBinding items of this control. Returns true on success 
            false on failure.
            
            Unbinding handles unbinding and checking for unbinding errors for invalid 
            data values that can't be converted back into their underlying data source.
             On failure of .Unbind() the BindingErrors collection will be set. A 
            typical unbind operation occurs in  button click event or other 'save' 
            operation fired from the page:
            
            &lt;&lt;code lang="C#"&gt;&gt;
            protected void btnSave_Click(object sender, EventArgs e)
            {
                // unbind back into the underlying data source: Product.Entity for most
             fields
                DataBinder.Unbind();
            
                // check for binding errors and display if there's a problem
                if (DataBinder.BindingErrors.Count &gt; 0)
                {
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                // validate the business object - check product entity for rule 
            violations
                if (!Product.Validate())
                {
                    // Automatically add binding errors from bus object 
            ValidationErrors
                    // requires IList that has ControlID and Message properties
                    
            DataBinder.AddValidationErrorsToBindingErrors(Product.ValidationE
            rrors);
            
                    // You can also manually add binding error messages and assign to a
             control
                    //DataBinder.AddBindingError("Invalid Country 
            Code",txtCountry);
            
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                if (!Product.Save())
                {
                    ErrorDisplay.ShowError("Couldn't save Product:&lt;br/&gt;" + 
            Product.ErrorMessage);
                    return;
                }
            
                ErrorDisplay.ShowMessage("Product information has been saved.");
            }
            &lt;&lt;/code&gt;&gt;
            <seealso>Class DataBinder</seealso>
            </summary>
            <returns>True if there are no errors. False if unbinding failed and BindingErrors Collection set with errors.</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.Unbind(System.Web.UI.Control)">
            <summary>
            Unbinds value from controls back into their underlying binding sources for 
            the defined DataBinding items of this control. Returns true on success 
            false on failure.
            
            Unbinding handles unbinding and checking for unbinding errors for invalid 
            data values that can't be converted back into their underlying data source.
             On failure of .Unbind() the BindingErrors collection will be set. A 
            typical unbind operation occurs in  button click event or other 'save' 
            operation fired from the page:
            
            &lt;&lt;code lang="C#"&gt;&gt;
            protected void btnSave_Click(object sender, EventArgs e)
            {
                // unbind back into the underlying data source: Product.Entity for most
             fields
                DataBinder.Unbind();
            
                // check for binding errors and display if there's a problem
                if (DataBinder.BindingErrors.Count &gt; 0)
                {
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                // validate the business object - check product entity for rule 
            violations
                if (!Product.Validate())
                {
                    // Automatically add binding errors from bus object 
            ValidationErrors
                    // requires IList that has ControlID and Message properties
                    
            DataBinder.AddValidationErrorsToBindingErrors(Product.ValidationE
            rrors);
            
                    // You can also manually add binding error messages and assign to a
             control
                    //DataBinder.AddBindingError("Invalid Country 
            Code",txtCountry);
            
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                if (!Product.Save())
                {
                    ErrorDisplay.ShowError("Couldn't save Product:&lt;br/&gt;" + 
            Product.ErrorMessage);
                    return;
                }
            
                ErrorDisplay.ShowMessage("Product information has been saved.");
            }
            &lt;&lt;/code&gt;&gt;
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="Container">
            The top level container Control that is bound.
            </param>
            <returns>True if there are no errors. False if unbinding failed. Check the BindingErrors for errors.</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.HandleUnbindingError(Westwind.Web.Controls.DataBindingItem,System.Exception)">
            <summary>
            Manages errors that occur during unbinding. Sets BindingErrors collection and
            and writes out validation error display to the page if specified
            </summary>
            <param name="Item"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBinding(System.Web.UI.Control,System.String,System.Object,System.String)">
            <summary>
            Adds a binding to the control. This method is a simple way to establish a 
            binding.
            
            Returns the Item so you can customize properties further
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="ControlToBind">
            An instance of the control to bind to
            </param>
            <param name="ControlPropertyToBind">
            Property on the control to bind to
            </param>
            <param name="SourceObjectToBindTo">
            An instance of the data item or object that is to be bound
            </param>
            <param name="SourceMemberToBindTo">
            The name of the property to bind on the data item or object
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBinding(System.Web.UI.Control,System.String,System.String,System.String)">
            <summary>
            Adds a binding to the control. This method is a simple way to establish a 
            binding.
            
            Returns the Item so you can customize properties further
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="ControlToBind">
            An instance of a control that is to be bound
            </param>
            <param name="ControlPropertyToBind">
            The property on the control to bind to
            </param>
            <param name="SourceObjectNameToBindTo">
            The name of a data item or object to bind to.
            </param>
            <param name="SourceMemberToBindTo">
            The name of the property on the object to bind to
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBinding(System.Web.UI.Control)">
            <summary>
            This method only adds a data binding item, but doesn't bind it to anything.
             This can be useful for only displaying errors
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="ControlToBind">
            An instance of the control to bind to
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBindingError(System.String,System.String)">
            <summary>
            Adds a binding error message to a specific control attached to this binder
            BindingErrors collection.
            </summary>
            <param name="ControlName">Form relative Name (ID) of the control to set the error on</param>
            <param name="ErrorMessage">The Error Message to set it to.</param>
            <returns>true if the control was found. False if not found, but message is still assigned</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBindingError(System.String,System.Web.UI.Control)">
            <summary>
            Adds a binding error to the collection of binding errors.
            </summary>
            <param name="ErrorMessage"></param>
            <param name="control"></param>
            <returns>false if the control was not able to get a control reference to attach hotlinks and an icon. Error message always gets added</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBindingError(System.String,Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Adds a binding error for DataBindingItem control. This is the most efficient
            way to add a BindingError. The other overloads call into this method after
            looking up the Control in the DataBinder.
            </summary>
            <param name="ErrorMessage"></param>
            <param name="BindingItem"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddValidationErrorsToBindingErrors(System.Collections.IList)">
            <summary>
            Takes a collection of ValidationErrors and assigns it to the
            matching controls. The IList object should have Message and
            ControlID (optional) properties.
            
            These controls must match in signature as follows:
            Must have the same name as the field and a 3 letter prefix. For example,
            
            txtCompany - matches company field
            cmbCountry - matches the Country field
            
            The input parameter is a generic IList value, but the type should be
            specifically Westwind.BusinessObjects.ValidationErrorCollection. The
            generic parameter is used here to avoid an assembly dependence.
            </summary>        
            <param name="errors">List of objects that have at least ControlID and Message properties</param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.LoadFromControls(System.Web.UI.Control)">
            <summary>
            Picks up all controls on the form that implement the IDataBinder interface
            and adds them to the DataBindingItems Collection
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.LoadDataBoundControls(System.Web.UI.Control)">
            <summary>
            Loop through all of the contained controls of the form and
            check for all that implement IDataBinder. If found
            add the BindingItem to this Databinder
            </summary>
            <param name="Container"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.DeriveUserFieldName(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Returns a UserField name. Returns UserFieldname if set, or if not
            attempts to derive the name based on the field.
            </summary>
            <param name="Control"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.DataBinder.GetBindingErrorMessageHtml(Westwind.Web.Controls.DataBindingItem)" -->
        <member name="M:Westwind.Web.Controls.DataBinder.AddScriptForAddHtmlAfterControl">
            <summary>
            This method adds the static script to handle injecting the warning icon/messages 
            into the page as literal strings.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.OnValidateControl(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Fires the ValidateControlEvent
            </summary>
            <param name="Item"></param>
            <returns>false - Validation for control failed and a BindingError is added, true - Validation succeeded</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.OnBeforeUnbindControl(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Fires the BeforeUnbindControl event
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.CanExtend(System.Object)">
            <summary>
            Determines whether a control can be extended. Basically
            we allow ANYTHING to be extended so all controls except
            the databinder itself are extendable.
            
            Optionally the control can be set up to not act as 
            an extender in which case the IsExtender property 
            can be set to false
            </summary>
            <param name="extendee"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.GetDataBindingItem(System.Web.UI.Control)">
            <summary>
            Returns a specific DataBinding Item for a given control.
            Always returns an item even if the Control is not found.
            If you need to check whether this is a valid item check
            the BindingSource property for being blank.
            
            Extender Property Get method
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.GetDataBindingItem(System.String)">
            <summary>
            Return a specific databinding item for a give control id.
            Note unlike the ControlInstance version return null if the
            ControlId isn't found. 
            </summary>
            <param name="ControlId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.NotifyDesigner">
            <summary>
            this method is used to ensure that designer is notified
            every time there is a change in the sub-ordinate validators
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.DataBindingItems">
            <summary>
            A collection of all the DataBindingItems that are to be bound. Each 
            &lt;&lt;%= TopicLink([DataBindingItem],[_1UL03RIKQ]) %&gt;&gt; contains 
            the information needed to bind and unbind a DataSource to a Control 
            property.
            <seealso>Class DataBinder</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.BindingErrors">
            <summary>
            A collection of binding errors that is filled after binding or unbinding
            if errors occur during binding and unbinding.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.ShowBindingErrorsOnControls">
            <summary>
            Determines whether binding errors are display on controls.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.HideValidators">
            <summary>
            Hides the Validator display and uses only the DataBinder's display for errors
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.DefaultBindingSource">
            <summary>
            A default binding source that is used if the binding source 
            on an individual item is not set.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.ErrorIconUrl">
            <summary>
            Optional Url to the Warning and Info Icons.
            Note: Used only if the control uses images.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.UseClientScriptHtmlInjection">
            <summary>
            Determines whether the control uses client script to inject error 
            notification icons/messages into the page. Setting this flag to true causes
             JavaScript to be added to the page to create the messages. If false, the 
            DataBinder uses Controls.Add to add controls to the Page or other 
            Containers.
            
            JavaScript injection is preferrable as it works reliable under all 
            environments except when JavaScript is off. Controls.Add() can have 
            problems if &lt;% %&gt; &lt;%= %&gt; script is used in a container that has
             an error and needs to add a control.
            <seealso>Class DataBinder</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.ErrorIconWebResource">
            <summary>
            The Web Resource Url used to access retrieve the Error Icon.
            Used to minimize reloading this URL from the resource manager
            repeatedly.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.AutoLoadDataBoundControls">
            <summary>
            Automatically imports all controls on the form that implement the IDataBinder interface and adds them to the DataBinder
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.IsExtender">
            <summary>
            Determines whether this control works as an Extender object to other controls on the form.
            In some situations it might be useful to disable the extender functionality such
            as when all databinding is driven through code or when using the IDataBinder
            interface with custom designed controls that have their own DataBinder objects.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.IsRequiredErrorMessage">
            <summary>
            Message displayed when IsRequired is blank. 
            
            Format string where {0} is the derived field name or UserFieldName.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.UnBindingErrorMessage">
            <summary>
            Error displayed when an unbinding error occurs. Typically
            this will be some sort of format conversion problem
            {0} denotes the derived field name.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.BindingErrorMessage">
            <summary>
            Binding Error message when a control fails to bind
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.ValidateControl">
            <summary>
            Event that can be hooked to validate each control after it's been unbound. 
            Allows for doing application level validation of the data once it's been 
            returned.
            
            This method receives a DataBindingItem parameter which includes a 
            reference to both the control and the DataSource object where you can check
             values. Return false from the event method to indicate that validation 
            failed which causes a new BindingError to be created and added to the 
            BindingErrors collection.
            <seealso>Class DataBinder</seealso>
            </summary>
            <example>
            &lt;&lt;code lang=&quot;C#&quot;&gt;&gt;protected bool 
            DataBinder_ValidateControl(Westwind.Web.Controls.DataBindingItem Item)
            {
                if (Item.ControlInstance == txtCategoryId)
                {
                    DropDownList List = Item.ControlInstance as DropDownList;
                    if (List.SelectedItem.Text == &quot;Dairy Products&quot;)
                    {
                        Item.BindingErrorMessage = &quot;Dairy Properties not allowed 
            (ValidateControl)&quot;;
                        return false;
                    }
                }
            
                return true;
            }&lt;&lt;/code&gt;&gt;
            </example>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.BeforeBindControl">
            <summary>
            Fired just before the control is bound. You can return false from the 
            handler to cause the control to not be bound
            <seealso>Class DataBinder</seealso>
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.AfterBindControl">
            <summary>
            Fires immediately after the control has been bound. You can check for
            errors or perform additional validation.
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.BeforeUnbindControl">
            <summary>
            Fires immediately before unbinding of a control takes place.
            You can return false to abort DataUnbinding.
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.AfterUnbindControl">
            <summary>
            Fires immediately after binding is complete. You can check for errors 
            and take additional action. 
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBinderDesigner">
            <summary>
            Control designer used so we get a grey button display instead of the 
            default label display for the control.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBindingItem">
             <summary>
             An individual binding item. A BindingItem maps a source object - 
             a property/field or database field - to a property of a Control object.
            
             The object is a child for the DataBinder object which acts as a master
             object that performs the actual binding of individual BingingItems.
             
             Binding Items can be attached to controls and if the control implements the
             IDataBinder.
             
             Note: This class inherits from Component so the designer can properly render
                   the item as an extender control.
             </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBindingItem.DesignMode">
            <summary>
            Explicitly set designmode flag - stock doesn't work on Collection child items
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.#ctor(Westwind.Web.Controls.DataBinder)">
            <summary>
            Overridden constructor to allow DataBinder to be passed
            as a reference. Unfortunately ASP.NET doesn't fire this when
            creating the DataBinder child items.
            </summary>
            <param name="Parent"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.OnValidate">
            <summary>
            Fires the Validation Event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.DataBind">
            <summary>
            Binds a source object and property to a control's property. For example
            you can bind a business object to a the text property of a text box, or 
            a DataRow field to a text box field. You specify a binding source object 
            (Customer.Entity or Customer.DataRow) and property or field(Company, FirstName)
            and bind it to the control and the property specified (Text).
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.DataBind(System.Web.UI.Control)">
            <summary>
            Binds a source object and property to a control's property. For example
            you can bind a business object to a the text property of a text box, or 
            a DataRow field to a text box field. You specify a binding source object 
            (Customer.Entity or Customer.DataRow) and property or field(Company, FirstName)
            and bind it to the control and the property specified (Text).
            </summary>
            <param name="container">the Base control that binding source objects are attached to</param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.Unbind">
            <summary>
            Unbinds control properties back into the control source.
            
            This method uses reflection to lift the data out of the control, then 
            parses the string value back into the type of the data source. If an error 
            occurs the exception is not caught internally, but generally the 
            FormUnbindData method captures the error and assigns an error message to 
            the BindingErrorMessage property of the control.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.Unbind(System.Web.UI.Control)">
            <summary>
            Unbinds control properties back into the control source.
            
            This method uses reflection to lift the data out of the control, then 
            parses the string value back into the type of the data source. If an error 
            occurs the exception is not caught internally, but generally the 
            FormUnbindData method captures the error and assigns an error message to 
            the BindingErrorMessage property of the control.
            <seealso>Class wwWebDataHelper</seealso>
            </summary>
            <param name="WebPage">
            The base control that binding sources are based on.
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.ToString">
            <summary>
            Returns a the control bindingsource and binding source member
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.Binder">
            <summary>
            Reference to the DataBinder parent object.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.ControlId">
            <summary>
            The ID of the control to that is bound.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.ControlInstance">
            <summary>
            An optional instance of the control that can be assigned. Used internally
            by the DataBindiner to assign the control whenever possible as the instance
            is more efficient and reliable than the string name.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.UnboundValue">
            <summary>
            The value that is to be assigned to the control after unbinding.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingSource">
             <summary>
             The binding source object that is the source for databinding.
             This is an object of some sort and can be either a real object
             or a DataRow/DataTable/DataSet. If a DataTable is used the first row 
             is assumed. If a DataSet is used the first table and first row are assumed.
            
             The object reference is always Page relative, so binding doesn't work
             against local variables, only against properties of the form. Form
             properties that are bound should be marked public or protected, but
             not private as Reflection is used to get the values. 
             
             This or me is implicit, but can be specified so
              "Customer" or "this.Customer" is equivalent. 
             </summary>
             <example>
             // Bind a DataRow Item
             bi.BindingSource = "Customer.DataRow";
             bi.BindingSourceMember = "LastName";
            
             // Bind a DataRow within a DataSet  - not recommended though
             bi.BindingSource = "this.Customer.Tables["TCustomers"].Rows[0]";
             bi.BindingSourceMember = "LastName";
            
             // Bind an Object
             bi.BindingSource = "InventoryItem.Entity";
             bi.BindingSourceMember = "ItemPrice";
             
             // Bind a form property
             bi.BindingSource = "this";   // also "me" 
             bi.BindingSourceMember = "CustomerPk";
             </example>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingSourceObject">
            <summary>
            An instance of the object that the control is bound to
            Optional - can be passed instead of a BindingSource string. Using
            a reference is more efficient. Declarative use in the designer
            always uses strings, code base assignments should use instances
            with BindingSourceObject.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingSourceMember">
            <summary>
            The property or field on the Binding Source that is
            bound. Example: BindingSource: Customer.Entity BindingSourceMember: Company
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingProperty">
            <summary>
            Property that is bound on the target controlId
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.DisplayFormat">
            <summary>
            Format Expression ( {0:c) ) applied to the binding source when it's displayed.
            Watch out for two way conversion issues when formatting this way. If you create
            expressions and you are also saving make sure the format used can be saved back.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.IsRequired">
            <summary>
            If set requires that the control contains a value, otherwise a validation error is thrown
            Useful mostly on TextBox controls only.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.HtmlEncode">
            <summary>
            Determines whether the content displayed is Html encoded to prevent script injection
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.UserFieldName">
            <summary>
            A descriptive name for the field used for error display
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.ErrorMessageLocation">
            <summary>
            Determines how binding and validation errors display on the control
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.IsBindingError">
            <summary>
            Internal property that lets you know if there was binding error
            on this control after binding occurred
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingErrorMessage">
            <summary>
            An error message that gets set if there is a binding error
            on the control. If this value is pre-set this value is used
            instead of an auto-generated message
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingMode">
            <summary>
            Determines how databinding and unbinding is done on the target control. 
            One way only fires DataBind() and ignores Unbind() calls. 
            Two-way does both. None effectively turns off binding.
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBindingItem.Validate">
            <summary>
            Use this event to hook up special validation logic. Called after binding completes. Return false to indicate validation failed
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.BindingErrorMessageLocations">
            <summary>
            Enumeration for the various binding error message locations possible
            that determine where the error messages are rendered in relation to the
            control.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.WarningIconRight">
            <summary>
            Displays an image icon to the right of the control
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.TextExclamationRight">
            <summary>
            Displays a text ! next to the control 
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.RedTextBelow">
            <summary>
            Displays the error message as text below the control
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.RedTextAndIconBelow">
            <summary>
            Displays an icon and the text of the message below the control.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.None">
            <summary>
            No binding
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.BindingModes">
            <summary>
            Determines how databinding is performed for the target control. Note that 
            if a DataBindingItem is  marked for None or OneWay, the control will not 
            be unbound or in the case of None bound even when an explicit call to 
            DataBind() or Unbind() is made.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.TwoWay">
            <summary>
            Databinding occurs for DataBind() and Unbind()
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.OneWay">
            <summary>
            DataBinding occurs for DataBind() only
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.UnbindOnly">
            <summary>
            DataBinding occurs for Unbind() Only 
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.None">
            <summary>
            No binding occurs (useful for conditional) enabling of binding via code
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBindingValidationEventArgs">
            <summary>
            Event Args passed to a Validate event of a DataBindingItem control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingValidationEventArgs.DataBindingItem">
            <summary>
            Instance of the DataBinding Control that fired this Validation event.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingValidationEventArgs.IsValid">
            <summary>
            Out flag that determines whether this control value is valid.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBindingItemCollection">
            <summary>
            Collection of individual DataBindingItems. Implemented explicitly as
            a CollectionBase class rather than using List#DataBindingItems#
            so that Add can be overridden
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBindingItemCollection._ParentDataBinder">
            <summary>
            Internal reference to the DataBinder object
            that is passed to the individual items if available
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.#ctor(Westwind.Web.Controls.DataBinder)">
            <summary>
            Preferred Constructor - Add a reference to the DataBinder object here
            so a reference can be passed to the children.
            </summary>
            <param name="Parent"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.#ctor">
            <summary>
            Not the preferred constructor - If possible pass a reference to the
            Binder object in the overloaded version.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.Add(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Add a DataBindingItem to the collection
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.AddAt(System.Int32,Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Add a DataBindingItem to the collection
            </summary>
            <param name="index"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.UpdateListInDesignMode">
            <summary>
            We have to delete 'empty' items because the designer requires items to be 
            added to the collection just for editing. This way we may have one 'extra'
            item, but not a whole long list of items.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItemCollection.Item(System.Int32)">
            <summary>
            Public indexer for the Items
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.Controls.IDataBinder">
            <summary>
            Extender style interface that allows adding a DataBinder 
            object to a control and interact with a DataBinder object
            on a Page. 
            
            Any control marked with this interface can be automatically
            pulled into the a DataBinder instance with 
            DataBinder.LoadFromControls().
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.Captcha">
            <summary>
            A Captcha control that uses simple math expressions for validation
            before accepting input. 
            
            This control is fully self contained and carries the expected 'result'
            with it in ControlState data, so unlike image captcha there's no separate
            handler involved.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Captcha.GenerateExpression">
            <summary>
            Method can be used to generate a new Expression object
            with new values to use. Use this method to update the
            wwCaptcha expression after you've saved an entry.        
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.Validated">
            <summary>
            Set during validation
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.ErrorMessage">
            <summary>
            The error message that is displayed when the not validated
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.DisplayMessage">
            <summary>
            The message that is displayed above the expression that is to be entered.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.Timeout">
            <summary>
            The timeout for this message in minutes.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.UniquePageId">
            <summary>
            An optional page identifier that has to be matched by
            the validation and is written into ViewState. Ensures
            that spammers can't just capture the full post buffer
            and repost to another page.
            
            This can be any unique value that the page uses like
            an ID or other page specific value that makes the
            particular request unique.
            
            Highly recommended you set this.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ErrorDisplay">
            <summary>
            The ErrorDisplay control provides a simple mechanism for displaying error
             and status messages in an easy to use, attractive and reusable control.
            
            The class includes several ways to do display data (ShowError, ShowMessage)
             as well as direct assignment to the .Text property which allows direct 
            display of content.
            
            Assigning to .Text and with a UserMessage set:
            &lt;&lt;img  src="images\wwErrorMsg.png"&gt;&gt;
            
            ShowMessage:
            &lt;&lt;img  src="images\wwErrorMsg_Msg.png"&gt;&gt;
            
            ShowError:
            &lt;&lt;img  src="images\wwErrorMsg_Error.png"&gt;&gt;
            
            ShowError and ShowMessage are plain display mechanisms that show only the  
            essage specified along with an icon to the left of the message. You can 
            also assign the Text property directly which assign the message body text. 
             The UserMessage displays at the top of the control is configurable. You 
            can also have the control timeout and 'fade out' after a few seconds of  
            dplaying the message text.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Method 
            </summary>
            <param name="width"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.ShowError(System.String)">
            <summary>
            Assigns an error message to the control
            <seealso>Class ErrorDisplay</seealso>
            </summary>
            <param name="Text">
            The main message text that is displayed.
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.ShowError(System.String,System.String)">
            <summary>
            Assigns an error message to the control as well as a UserMessage
            <seealso>Class ErrorDisplay</seealso>
            </summary>
            <param name="text">
            The main message text that is displayed.
            </param>
            <param name="Message">
            Optional Message header shown above the message text.
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.ShowMessage(System.String)">
            <summary>
            Displays a simple message in the display area along with the info icon 
            before it.
            <seealso>Class ErrorDisplay</seealso>
            </summary>
            <param name="Message">
            The message to display.
            </param>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.Text">
            <summary>
            The detail text of the error message
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.UserMessage">
            <summary>
            The message to display above the error message.
            For example: Please correct the following:
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.InfoImage">
            <summary>
            An image Url that is displayed with the ShowMessage method. Defaults to 
            InfoResource which loads an icon from the control assembly.
            <seealso>Class ErrorDisplay</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.Center">
            <summary>
            Determines whether the display box is centered
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.UseFixedHeightWhenHiding">
            <summary>
            Determines whether the control keeps its space padding
            when it is is hidden in order not to jump the display.
            Controls the visibility style attribute.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.HtmlEncodeMessage">
            <summary>
            Flag that determines whether the message is displayed
            as HTML or as text. By default message is encoded as text (true).
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.RenderMode">
            <summary>
            Determines how the error dialog renders
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.Width">
            <summary>
            The width of the ErrorDisplayBox
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.CssClass">
            <summary>
            The CSS Class used for the table and column to display this item.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.DisplayErrors">
            <summary>
            Holds a modelstate errors collection
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.DisplayTimeout">
            <summary>
            A timeout in milliseconds for how long the error display is visible. 0 means no timeout.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.RenderModes.Text">
            <summary>
            Error Text is Text and needs fixing up
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.RenderModes.Html">
            <summary>
            The text is HTML and ready to display
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.RenderModes.TextAsBulletList">
            <summary>
            Text is plain text and should be rendered as a bullet list
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.HelpControl">
            <summary>
            This class presents a Help Link on a page. Specify a linkname in the 
            HelpTopic property. Usually this is the name of a page.
            
            Note: Can only be dropped on a wwWebForm derived Page class as it
            depends on methods in this class to figure out base URLs.
            
            Note: The image does not display in design mode.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControl.HelpBaseUrl">
            <summary>
            The base Help Url that is used as a base for Help Topics.
            
            You should set this value in your application's startup code (Application_Start 
            or static constructor of a class). Any HelpTopic Ids used are appended
            to this base path. Note that this also works with dynamic URLs that
            use a querystring as long as the Topic id is the last thing and can
            simply be appended to the URL.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.HelpControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to render the help control text. Calls back to the
            wwWebForm.GetHelpHyperLink() to do all the work.
            
            Note: Requires the wwWebForm base class. Throws an exception otherwise
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.HelpControl.FormatHelpUrl(System.String)">
            <summary>
            Method used to format a Help Url into a fully qualified help Url.
            
            This method should be overridden in an application specific method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.HelpControl.GetHelpHyperLink(System.String,System.String,System.String,System.String,System.String)" -->
        <member name="P:Westwind.Web.Controls.HelpControl.HelpTopic">
            <summary>
            The Help Topic to display. This should be just the help detail - usually
            the filename only (ie. _SomePage.htm) in your help base path.
            
            If this value is blank it inherits the page's HelpTopic. If both are
            blank this help link is not displayed.
            
            Note: Make sure you set the static <see cref="!:wwWebForm.HelpBaseUrl">wwWebForm.HelpBaseUrl</see>&gt; property in your application
            startup so the proper help base path is used.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.Text">
            <summary>
            The text of the label. Leave blank to show only the image
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.AltText">
            <summary>
            The alternate text for the image displayed when the mouse hovers over the image.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.HelpControlType">
            <summary>
            Determines whether this control handles a help link and/or F1 key operation
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.HelpImage">
            <summary>
            The image used for the help icon. Defaults to ~/images/help.gif
            <seealso>Class wwHelpControl                                         </seealso>
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.HelpControlTypes">
            <summary>
            Determines whether link is treated as a link or as a page F1 handler.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControlTypes.HelpLink">
            <summary>
            A Help link is displayed
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControlTypes.F1Handler">
            <summary>
            This control only tries to handle page F1 access
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControlTypes.HelpLinkAndF1Handler">
            <summary>
            This control should display both a help link
            and handle the F1 key
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.MessageDisplayBase">
            <summary>
            This class is used to display messages with a single command via the 
            DisplayMessage() method. This class also has the ability to automatically 
            redirect to another page which allows moving to new pages and still be able
             to set Cookies if required.
            
            This class is abstract and requires an application specific subclass - 
            generally MessageDisplay.aspx that must follow a few simple but 
            <see>Creating a custom MessageDisplay page</see>.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.MessageDisplayBase.Pagename">
            <summary>
            Static member that determines the name of the MessageDisplay page.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayPage(System.Web.UI.WebControls.Label,System.Web.UI.WebControls.Label,System.Web.UI.WebControls.Label)">
            <summary>
            Displays the page with the appropriate controls filled in.
            </summary>
            <remarks>Assumes that lblHeader, lblMessage, lblRedirectHyperLink are defined.</remarks>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayPage">
            <summary>
            Displays the page by setting the lblHeader, lblMessage and lblRedirectHyperLink controls
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayMessage(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Generates a self-contained error message display page that issues a 
            Server.Transfer to the MessageDisplay.aspx page in your application root.
            <seealso>Class wwMessageDisplay</seealso>
            </summary>
            <param name="Header">
            Header message and title of the page
            </param>
            <param name="Message">
            The body of the message - this is HTML
            </param>
            <param name="RedirectUrl">
            Url to redirect to
            </param>
            <param name="Timeout">
            Timeout for the page before redirecting
            </param>
            <returns>Void</returns>
            <example>
            MessageDisplay.DisplayMessage("Clearing Profile",
            	"We're clearing out your profile to log you out of the "+
            	App.Configuration.StoreName + " for this computer.",
            	"/default.aspx",4);
            </example>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayMessage(System.String,System.String,System.String,System.Int32)">
            <summary>
            Generates a self-contained error message display page that issues a 
            Server.Transfer to the MessageDisplay.aspx page in your application root.
            <seealso>Class wwMessageDisplay</seealso>
            </summary>
            <param name="Header">
            Header message and title of the page
            </param>
            <param name="Message">
            The body of the message - this is HTML
            </param>
            <param name="RedirectUrl">
            Url to redirect to
            </param>
            <param name="Timeout">
            Timeout for the page before redirecting
            </param>
            <returns>Void</returns>
            <example>
            MessageDisplay.DisplayMessage("Clearing Profile",
            	"We're clearing out your profile to log you out of the "+
            	App.Configuration.StoreName + " for this computer.",
            	"/default.aspx",4);
            </example>		
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayMessage(System.String,System.String)">
            <summary>
            Generates a self-contained error message display page that issues a 
            Server.Transfer to the MessageDisplay.aspx page in your application root.
            <seealso>Class wwMessageDisplay</seealso>
            </summary>
            <param name="Header">
            Header message and title of the page
            </param>
            <param name="Message">
            The body of the message - this is HTML
            </param>
            <returns>Void</returns>
            <example>
            MessageDisplay.DisplayMessage("Clearing Profile",
            	"We're clearing out your profile to log you out of the "+
            	App.Configuration.StoreName + " for this computer.",
            	"/default.aspx",4);
            </example>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.MessageHeader">
            <summary>
            The Header to be displayed on the page. Used only in the 'display' code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.Message">
            <summary>
            The message to be displayed on the page. This text may be in HTML format. Used only in the display code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.RedirectUrl">
            <summary>
            The Url to redirect to. Optional. Used only in the display code
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.StyleSheet">
            <summary>
            A stylesheet reference that gets embedded into the page if set.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.BasePath">
            <summary>
            This property is set during the loading of the page and can be used
            inside of the page to allow relative links to be found.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.Pager">
            <summary>
            The Pager class provides a standalone pager that can be added
            on any page and doesn't require a DataSource or related control. The
            control can be manually assigned values to display or automatically
            infer values using one of the FilterXXX methods to filter a data source.
            
            &lt;&lt;img src="images/pager1.png" /&gt;&gt;
            <seealso>Using the Pager Web Control to Page Content and Data Results</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.Pager._startPage">
            <summary>
            Internally used to hold the first page to render when max pages is exceeded
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.Pager._endPage">
            <summary>
            Internally used to hold the last page to render when max pages are exceeded
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            overridden to handle custom pager rendering for runtime and design time
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.ConfigurePagesToRender">
            <summary>
            Determines the startpage and endpage which are the first
            and last page numbers that are rendered.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.FixupBaseUrl">
            <summary>
            Tries to retrieve the Page url if one wasn't provided
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.OnInit(System.EventArgs)">
            <summary>
            Updates the internal settings based on the url
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.Pager.FilterIQueryable``1(System.Linq.IQueryable{``0},System.Int32)" -->
        <member name="M:Westwind.Web.Controls.Pager.FilterIQueryable``1(System.Linq.IQueryable{``0})">
            <summary>
            Queries the database for the ActivePage applied manually
            or from the Request["page"] variable. This routine
            figures out and sets TotalPages, ActivePage and
            returns a filtered subset IQueryable that contains
            only the items from the ActivePage.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.FilterIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="activePage"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.FilterDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Filters a data table for an ActivePage.
            
            Note: Modifies the data set permanently by remove DataRows
            </summary>
            <param name="dt">Full result DataTable</param>
            <param name="activePage">Page to display. 0 to use ActivePage property </param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.CalculateTotalPagesFromTotalItems">
            <summary>
            Calculates total pages from TotalItems
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.TotalPages">
            <summary>
            Total number of pages for this pager
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ActivePage">
            <summary>
            The page to display. Values are 1 based.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PageSize">
            <summary>
            The number of items on the page
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.TotalItems">
            <summary>
            Total number of items available - must be set manually or via one of the filter methods
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.BaseUrl">
            <summary>
            The base Url for each of the paging links.
            If left blank the control will use the current
            page Url and append.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.QueryStringPageField">
            <summary>
            Query string key name for the Page variable
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.CssClass">
            <summary>
            The CSS class used for the immediate pager control. By default this
            is rendered as a div tag. Default styling floats it right. 
            
            Use RenderPagerContainerDiv and PagerContainerCssClass to specify an 
            'outer' container if desired.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PageLinkCssClass">
            <summary>
            CSS Class used for page links
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.SelectedPageCssClass">
            <summary>
            CSS class used for the selected page
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PagesText">
            <summary>
            Pages: text string
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PagesTextCssClass">
            <summary>
            Pages: text
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PreviousText">
            <summary>
            The text displayed for the previous button. If this
            text is empty the button is not displayed.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.NextText">
            <summary>
            The text displayed for the next button. If empty
            this button isn't displayed.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.MaxPagesToDisplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ShowFirstAndLastPageLinks">
            <summary>
            Determines whether the 1... and ...n page links are shown
            before and after the displayed pages
            
            Only shown if there are more pages than MaxPagesToDisplay
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ShowPreviousNextLinks">
            <summary>
            Determines whether the Previous and Next buttons are displayed
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.RenderContainerDiv">
            <summary>
            Determines whether a container div tag is generated. 
            Useful to allow nothing to be rendered if there are less than 2 pages
            as it hides the container. Alternately you can render the container
            through your markup but in that case you may end up with an empty container
            if there's no data or only a single page.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.RenderContainerDivBreak">
            <summary>
            Determines whether a br clear='all' is rendered inside of the container div to break content.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ContainerDivCssClass">
            <summary>
            The CSS Class used for the container div
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.PreservePropertyControl">
            <summary>
            Control used to automatically preserve properties on a page.
            By calling PreserveProperty you're instructing this control
            to persist and then restore the value of the specified property
            or field of a control and have it automatically restored on the
            next page access.
            
            The difference of this mechanism is that it works with ViewState
            off, and automatically reassigns persisted values back to the 
            controls they belong to without any extra code. It greatly 
            simplifies persisting values like IDs or some ViewState based
            values without having to use Viewstate on a page.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.AddParsedSubObject(System.Object)">
            <summary>
            Required to be able to properly PreservedProperty Collection 
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Westwind.Web.Controls.PreservePropertyControl.SerialzedProperties">
            <summary>
            Internal persistance object used to serialize
            into the state store. Hashtable is Serializable
            and can be serialized by the LosFormatter
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.PreservePropertyControl.PreservePropertyKey">
            <summary>
            Cache key value used
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.PreserveProperty(System.Web.UI.Control,System.String)">
            <summary>
            Adds a control to the collection. At this point only the
            control and property are stored.
            </summary>
            <param name="WebControl"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.PreserveProperty(System.String,System.String)">
            <summary>
            Adds a control to the collection. At this point only the
            control and property are stored.
            </summary>
            <param name="ControlId"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.OnInit(System.EventArgs)">
            <summary>
            Read in data of preserved properties in OnInit
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.OnPreRender(System.EventArgs)">
            <summary>
            Write out data for preserved properties in OnPreRender
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.SaveControlState">
            <summary>
            Saves the preserved Properties into a Hashtabe where the key is
            a string containing the ControlID and Property name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.LoadControlState(System.Object)">
            <summary>
            Overridden to store a HashTable of preserved properties.
            Key: CtlID + "|" + Property
            Value: Value of the control
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.SaveStateToLosStorage">
            <summary>
            Saves state the specified storage mechanism by
            first serializing to a string with the LosFormatter
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.LoadStateFromLosStorage">
            <summary>
            Retrieves the serialized data from the Storage medium
            as string using LosFormatter formatting.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservePropertyControl.PreservedProperties">
            <summary>
            Collection of all the preserved properties that are to
            be preserved/restored. Collection hold, ControlId, Property
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservePropertyControl.StorageMode">
            <summary>
            Determines the storage mode for the control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservePropertyControl.Enabled">
            <summary>
            Determines whether the control preserves and restores values
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.PreservedProperty">
            <summary>
            An individual Preserved Property. Contains
            a ControlId and Property name and optional (on preserve)
            an instance of a control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservedProperty.ControlId">
            <summary>
            The id for the control to preserve properties on
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservedProperty.Property">
            <summary>
            Property that the value is stored for
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservedProperty.ControlInstance">
            <summary>
            An optional instance of the control that can be assigned
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.PropertyStorageModes">
            <summary>
            Determines how preserved properties are stored on the page
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.TabControl">
            <summary>
            The TabControl provides a simple client control tab interface  to display 
            multiple pages with a tabbed interface at the top. Content pages are simply
             created as plain &lt;div&gt; tags with an ID that is referenced via the 
            TabPageClientId property. A default tab can be chosen which is displayed 
            initially and the control keeps track of the tabpage active across 
            apostbacks.
            
            &lt;&lt;img src="images/TabControl.png"&gt;&gt;
            
            The tab control only fires on the client and there are no server side 
            events fired. You can assign the SelectedTab property but otherwise the 
            server side has no additional control. Client side code can activate the 
            tab with a JavaScript ActivateTab(tabId, num) which specifies the ClientID 
            of the tab control and the tab by number or client ID of the Div.
            </summary>
            <example>
            &lt;&lt;code lang=&quot;HTML&quot;&gt;&gt;
            &lt;div class=&quot;containercontent&quot;&gt;
            
                &lt;ww:TabControl runat=&quot;server&quot; ID=&quot;TabControls&quot; 
            TabHeight=&quot;25&quot; TabWidth=&quot;120&quot;
                    TabstripSeparatorHeight=&quot;&quot; &gt;
                    &lt;TabPages&gt;
                        &lt;ww:TabPage runat=&quot;server&quot; ID=&quot;Page1&quot; 
            TabPageClientId=&quot;Page1&quot; Caption=&quot;Page 1&quot;
                            
            Style=&quot;height:25px;width:120px;height:25px;width:120px;&quot; /&gt;
                        &lt;ww:TabPage runat=&quot;server&quot; ID=&quot;Page2&quot; 
            TabPageClientId=&quot;Page2&quot; Caption=&quot;Page 2&quot;
                            
            Style=&quot;height:25px;width:120px;height:25px;width:120px;&quot; /&gt;
                        &lt;ww:TabPage runat=&quot;server&quot; ID=&quot;Page3&quot; 
            TabPageClientId=&quot;Page3&quot; Caption=&quot;Page 3&quot;
                            
            Style=&quot;height:25px;width:120px;height:25px;width:120px;&quot;/&gt;
            
                    &lt;/TabPages&gt;
                &lt;/ww:TabControl&gt;
            
                &lt;div id=&quot;Page1&quot; class=&quot;tabpage&quot;&gt;
                    Page 1
                &lt;/div&gt;
                &lt;div id=&quot;Page2&quot; class=&quot;tabpage&quot;&gt;
                    Page 2
                &lt;/div&gt;
                &lt;div id=&quot;Page3&quot; class=&quot;tabpage&quot;&gt;
                    Page 3
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;&lt;/code&gt;&gt;
            </example>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.Output">
            <summary>
            The completed control output
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.TabOutput">
            <summary>
            The output for the tabs generated by RenderTabs
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.Script">
            <summary>
            The output of the Script block required to handle tab activation
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.ClientScriptProxy">
            <summary>
            Makes MS Ajax aware
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.RenderControl">
            <summary>
            High level routine that renders the actual control
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.RenderTabs">
            <summary>
            Creates various string properties that are merged into the output template.
            Creates the tabs and the associated script code.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.AddTab(System.String,System.String,System.String)">
            <summary>
            Adds a new item to the Tab collection.
            </summary>
            <param name="Caption">The caption of the tab</param>
            <param name="Link">The HTTP or JavaScript link that is fired when the tab is activated. Can optionally be Default which activates the tab and activates the page ID.</param>
            <param name="TabPageClientId">The ID for this tab - map this to an ID tag in the HTML form.</param>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.AddTab(System.String,System.String)">
            <summary>
            Adds a new item to the Tab collection.
            </summary>
            <param name="Caption">The caption of the tab</param>
            <param name="Link">The HTTP or JavaScript link that is fired when the tab is activated. Can optionally be Default which activates the tab and activates the page ID.</param>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.FixupActionLink(Westwind.Web.Controls.TabPage)">
            <summary>
            Fixes up the ActionLink property to final script code
            suitable for an onclick handler
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.AddParsedSubObject(System.Object)">
            <summary>
            Required to be able to properly deal with the Collection object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.MasterTemplate">
            <summary>
            The master HTML template into which the dynamically generated tab display is rendered.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabPages">
            <summary>
            Collection of Tabpages.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.SelectedTab">
            <summary>
            The Selected Tab. Set this to the TabPageClientId of the tab that you want to have selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabWidth">
            <summary>
            The width for each of the tabs. Each tab will be this width.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabHeight">
            <summary>
            The height of each of the tabs.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabCssClass">
            <summary>
            The CSS class that is used to render nonselected tabs.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.SelectedTabCssClass">
            <summary>
            The CSS class that is used to render a selected button. Defaults to selectedtabbutton.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabStripSeparatorCssClass">
            <summary>
            The class used for the separator strip between tab and content
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.TabPage">
            <summary>
            The individual TabPage class that holds the intermediary Tab page values
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabPage.TabImage">
            <summary>
            Image placed on the left of the Tab
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabPage.Style">
            <summary>
            Image placed on the left of the Tab
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabCollection.Add(Westwind.Web.Controls.TabPage)">
            <summary>
            Adds a new error to the collection
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabCollection.Item(System.Int32)">
            <summary>
            Indexer property for the collection that returns and sets an item
            </summary>
        </member>
    </members>
</doc>
